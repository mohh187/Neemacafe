<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>ŸÖŸÜŸäŸà ŸÜŸäŸÖÿ© | Neema Menu ‚Äî ÿ¨ŸàÿßŸÑ + ŸÑÿ∫ÿ™ŸäŸÜ + ÿØÿßŸÉŸÜ/ŸÅÿßÿ™ÿ≠</title>
  <style>
    :root{
      --brand:#8b5e3c; --brand-2:#d4a373; --brand-dark:#70492d;
      --bg:#faf8f6; --card:#ffffff; --text:#1f1f1f; --muted:#6b6b6b; --border:#e9e6e3;
      --radius:16px; --shadow:0 10px 24px rgba(0,0,0,.08);
    }
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial; background:var(--bg); color:var(--text);}
    body.dark{ --bg:#0f0f0f; --card:#1a1a1a; --text:#f3f3f3; --muted:#b7b7b7; --border:#2a2a2a; }

    header{position:sticky;top:0;z-index:20;background:rgba(255,255,255,.9);backdrop-filter:saturate(140%) blur(8px);border-bottom:1px solid var(--border)}
    body.dark header{background:rgba(20,20,20,.82)}
    .wrap{max-width:960px;margin-inline:auto;padding:12px 14px}
    .top{display:flex;align-items:center;justify-content:space-between;gap:16px;flex-wrap:wrap}
    .brand{display:flex;align-items:center;gap:12px;flex:1 1 auto;min-width:220px}
    .brand-text{display:flex;flex-direction:column;gap:4px;min-width:0;align-items:flex-start}
    .brand img{width:48px;height:48px;border-radius:12px;border:1px solid var(--border);background:#fff;object-fit:contain}
    .brand h1{font-size:18px;margin:0;line-height:1.2}
    .header-side{display:flex;flex-direction:column;gap:10px;align-items:flex-end;flex:1 1 auto;min-width:260px}
    .actions{display:flex;gap:8px;align-items:center;flex-wrap:wrap;justify-content:flex-end}
    .btn{border:1px solid var(--border);background:var(--card);color:var(--text);padding:8px 10px;border-radius:10px;font-size:14px;cursor:pointer}
    .btn.small{padding:6px 8px;font-size:12px}
    .btn.primary{background:var(--brand);border-color:transparent;color:#fff}
    .btn.ghost{background:transparent}
    .greeting{display:flex;align-items:center;gap:8px;flex-wrap:wrap;justify-content:flex-end;text-align:right;width:100%}
    .greeting span{font-size:13px;color:var(--muted)}
    .greeting .welcome-name{font-weight:700;color:var(--brand)}
    @media(max-width:680px){
      .top{flex-direction:column;align-items:stretch;gap:14px}
      .brand{justify-content:center;text-align:center}
      .brand-text{align-items:center}
      .header-side{align-items:stretch;gap:12px;min-width:0}
      .greeting{justify-content:space-between;text-align:inherit}
      .actions{justify-content:space-between}
      .actions .btn{flex:1 1 0;min-width:110px}
    }
    .search{display:flex;gap:8px;margin:10px 0 8px}
    .search input{flex:1;padding:12px 14px;border-radius:12px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:15px}
    main{max-width:960px;margin-inline:auto;padding:10px 14px 180px}
    details{background:var(--card);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);overflow:hidden;margin:10px 0}
    summary{list-style:none;padding:14px 16px;cursor:pointer;display:flex;align-items:center;gap:10px;font-weight:700}
    summary::marker{display:none}
    .pill{display:inline-block;background:#efe6de;color:#5a3a22;border-radius:999px;padding:3px 8px;font-size:12px;margin-inline-start:6px}
    body.dark .pill{background:#2b221b;color:#d9c3ad}
    .grid{display:grid;grid-template-columns:1fr;gap:10px;padding:8px 12px 14px}
    @media(min-width:520px){.grid{grid-template-columns:repeat(2,1fr)}}
    .item{display:grid;grid-template-columns:72px 1fr;gap:10px;align-items:center;background:var(--card);border:1px solid var(--border);border-radius:14px;padding:10px}
    .thumb{width:72px;height:72px;border-radius:12px;overflow:hidden;border:1px solid var(--border);background:#fafafa}
    .thumb img{width:100%;height:100%;object-fit:contain;background:#fafafa}
    .line{display:flex;align-items:center;gap:8px}
    .name{font-weight:700}
    .dots{flex:1 1 auto;border-bottom:1px dotted #c9c3bd;transform:translateY(-4px);opacity:.6}
    .price{font-weight:800;color:var(--brand)}
    .sub{font-size:12px;color:var(--muted)}
    .addBtn{margin-top:6px;padding:4px 6px;font-size:12px;border-radius:8px;border:1px solid var(--border);cursor:pointer;background:var(--brand-2);color:#fff}

    /* Table modal */
    .modal{position:fixed;inset:0;display:none;align-items:center;justify-content:center;z-index:200}
    .modal .backdrop{position:absolute;inset:0;background:rgba(0,0,0,.45)}
    .table-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:360px;width:100%;box-shadow:var(--shadow);text-align:center}
    .table-modal .sheet h3{margin:0 0 10px}
    .table-modal .sheet p{margin:0 0 16px;color:var(--muted);font-size:14px;line-height:1.6}
    .table-modal .sheet .note{margin:6px 0 16px;font-size:13px;line-height:1.5;color:var(--muted)}
    .table-modal .sheet select{width:100%;padding:12px;border-radius:12px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:15px}
    .table-modal .sheet .actions{display:flex;gap:8px;margin-top:16px}
    .table-modal .sheet .actions .btn{flex:1}
    .table-modal .sheet .error{color:#c0392b;font-size:13px;margin-top:12px;display:none}
    body.dark .table-modal .sheet{background:var(--card);color:var(--text)}
    body.dark .table-modal .sheet .error{color:#e57373}

    /* Order log modal */
    .log-modal{align-items:center}
    .log-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:420px;width:100%;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:12px;max-height:80vh}
    .log-modal .sheet h3{margin:0}
    .log-modal .sheet p{margin:0;color:var(--muted);font-size:14px;line-height:1.6}
    .log-modal .sheet .log-empty{color:var(--muted);text-align:center;padding:18px 0;font-size:14px}
    .log-modal .sheet .log-list{flex:1 1 auto;overflow:auto;display:flex;flex-direction:column;gap:12px;padding:2px}
    .log-entry{border:1px solid var(--border);border-radius:14px;padding:12px;background:var(--card);box-shadow:0 6px 16px rgba(0,0,0,.04)}
    .log-entry h4{margin:0;font-size:15px;display:flex;align-items:center;justify-content:space-between;gap:10px}
    .log-entry h4 .total{font-weight:800;color:var(--brand)}
    .log-entry .meta{font-size:12px;color:var(--muted);margin-top:6px;display:flex;flex-wrap:wrap;gap:8px}
    .log-entry .items{margin:10px 0 0;padding-inline-start:20px;font-size:13px;color:var(--text)}
    .log-entry .items li{margin-bottom:4px;line-height:1.5}
    .log-entry .loyalty-note{margin-top:8px;font-size:12px;color:var(--brand);font-weight:600}
    .log-modal .sheet .actions{display:flex;gap:8px}

    /* Profile Modal */
    .profile-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:380px;width:100%;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:12px;text-align:start}
    .profile-modal .sheet h3{margin:0}
    .profile-modal .sheet p{margin:0;color:var(--muted);font-size:14px;line-height:1.6}
    .profile-modal .sheet label{font-size:13px;color:var(--muted)}
    .profile-modal .sheet input{width:100%;padding:12px;border-radius:12px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:14px}
    .profile-modal .sheet .note{font-size:12px;color:var(--muted);margin-top:-4px}
    .profile-modal .sheet .actions{display:flex;gap:8px}

    /* Loyalty Modal */
    .loyalty-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:24px;border-radius:18px;max-width:380px;width:100%;box-shadow:var(--shadow);text-align:center;display:flex;flex-direction:column;gap:16px}
    .loyalty-modal .sheet h3{margin:0}
    .loyalty-modal .sheet p{margin:0;font-size:14px;color:var(--muted);line-height:1.6}
    .loyalty-modal .sheet strong,.loyalty-modal .sheet .welcome-name{color:var(--brand)}

    .bar{position:fixed;bottom:0;left:0;right:0;z-index:25;background:var(--card);border-top:1px solid var(--border);padding:10px}
    .bar .inner{max-width:960px;margin-inline:auto;display:flex;gap:8px}
    select, .bar .inner .btn{flex:1}
    footer{color:var(--muted);text-align:center;margin:18px 0 90px}

    /* Cart */
    #cart{position:fixed;bottom:60px;right:10px;width:300px;background:var(--card);border:1px solid var(--border);border-radius:12px;padding:10px;box-shadow:var(--shadow);display:none;z-index:30;overflow:auto;max-height:400px}
    #cart h3{margin:0 0 6px 0;font-size:16px}
    #cart .loyalty-summary{margin-top:6px;font-size:13px;color:var(--brand);font-weight:600}
    #cart div button{margin-left:4px;background:red;color:#fff;border:none;border-radius:6px;padding:2px 4px;cursor:pointer;font-size:12px}
    #cart .discount{display:flex;flex-direction:column;gap:6px;margin:10px 0}
    #cart .discount label{font-size:13px;color:var(--muted)}
    #cart .discount input{padding:10px;border-radius:10px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:14px}
  </style>
</head>
<body>
  <header>
    <div class="wrap">
      <div class="top">
        <div class="brand">
          <img src="https://i.postimg.cc/g0g9RwM0/Untitled-design-9.png" alt="Neema Menu" />
          <div class="brand-text">
            <h1 id="title">ŸÖŸÜŸäŸà ŸÜŸäŸÖÿ©</h1>
            <span class="pill" id="tagline">ŸÇÿßÿ¶ŸÖÿ© ÿ¨ŸàÿßŸÑ ‚Ä¢ ÿ´ŸÜÿßÿ¶Ÿäÿ© ÿßŸÑŸÑÿ∫ÿ© ‚Ä¢ ÿØÿßŸÉŸÜ/ŸÅÿßÿ™ÿ≠</span>
          </div>
        </div>
        <div class="header-side">
          <div class="greeting" id="greetingBar">
            <span id="greetingText">ŸÖÿ±ÿ≠ÿ®ÿß ÿ∂ŸäŸÅŸÜÿß ÿßŸÑÿπÿ≤Ÿäÿ≤</span>
            <button class="btn ghost small" id="profileBtn">üë§ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™</button>
          </div>
          <div class="actions">
            <button class="btn ghost" id="orderLogBtn">üìú <span id="orderLogBtnLabel">ÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™</span></button>
            <button class="btn" id="langBtn">E</button>
            <button class="btn" id="modeBtn">üåô</button>
          </div>
        </div>
      </div>
      <div class="search">
        <input id="search" placeholder="ÿßÿ®ÿ≠ÿ´ ÿ®ÿßÿ≥ŸÖ ÿßŸÑÿµŸÜŸÅ‚Ä¶ (ŸÖÿ´ÿßŸÑ: ŸÑÿßÿ™ŸäŸáÿå ŸÖŸàŸáŸäÿ™Ÿà)">
      </div>
    </div>
  </header>

  <main>
    <details open>
      <summary>üî• <span data-i18n="hot_drinks">ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿßŸÑÿ≥ÿßÿÆŸÜÿ©</span></summary>
      <div class="grid" id="hot-coffee"></div>
      <div class="grid" id="hot-tea"></div>
    </details>
    <details>
      <summary>‚ùÑÔ∏è <span data-i18n="cold_drinks">ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿßŸÑÿ®ÿßÿ±ÿØÿ©</span></summary>
      <div class="grid" id="cold-coffee"></div>
      <div class="grid" id="cold-mojito"></div>
      <div class="grid" id="cold-other"></div>
    </details>
    <details>
      <summary>üç∞ <span data-i18n="dessert">ÿßŸÑÿ≠ŸéŸÑŸéŸâ</span></summary>
      <div class="grid" id="dessert-cake"></div>
      <div class="grid" id="dessert-side"></div>
    </details>

    <footer>
      <div id="foot">¬© ŸÜŸäŸÖÿ© ŸÉÿßŸÅŸäŸá ‚Äî ŸÇÿßÿ¶ŸÖÿ© ÿ™ŸÅÿßÿπŸÑŸäÿ© ŸÑŸÑÿ¨ŸàÿßŸÑ</div>
    </footer>
  </main>

  <!-- Bottom bar -->
  <div class="bar">
    <div class="inner">
      <select id="table"></select>
      <button class="btn primary" id="callBtn">üîî <span data-i18n="call_waiter">ÿ∑ŸÑÿ® ÿßŸÑŸÜÿßÿØŸÑ</span></button>
    </div>
  </div>

  <!-- Cart -->
  <div id="cart">
    <h3>ÿ≥ŸÑÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ / Cart</h3>
    <div id="cart-items"></div>
    <div style="margin-top:8px;"><strong>ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä / Total: </strong><span id="cart-total">0</span></div>
    <div class="loyalty-summary" id="cart-loyalty-note" style="display:none"></div>
    <div class="discount">
      <label for="discountInput" id="discountLabel">ŸÉŸàÿØ ÿßŸÑÿÆÿµŸÖ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)</label>
      <input id="discountInput" placeholder="ÿ£ÿØÿÆŸÑ ŸÉŸàÿØ ÿßŸÑÿÆÿµŸÖ" autocomplete="off">
    </div>
    <button id="sendOrder" class="btn primary" style="margin-top:8px;">ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ® / Send Order</button>
  </div>

  <!-- Table Selection Modal -->
  <div class="modal table-modal" id="tableModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="tableModalTitle">ÿ≠ÿØÿØ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ©</h3>
      <p id="tableModalDesc">Ÿäÿ¨ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ© ŸÇÿ®ŸÑ ŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿ∑ŸÑÿ®.</p>
      <p class="note" id="tableModalNote">ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ© ŸÖŸàÿ¨ŸàÿØ ÿπŸÑŸâ ÿßŸÑÿ®ÿßÿ±ŸÉŸàÿØ ÿπŸÑŸâ ÿßŸÑÿ∑ÿßŸàŸÑÿ©.</p>
      <select id="tablePrompt"></select>
      <div class="actions">
        <button class="btn" id="tableCancelBtn">ÿ•ŸÑÿ∫ÿßÿ°</button>
        <button class="btn primary" id="tableConfirmBtn">ÿ™ÿ£ŸÉŸäÿØ</button>
      </div>
      <div class="error" id="tablePromptError">Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ© ŸÑÿ•ÿ™ŸÖÿßŸÖ ÿßŸÑÿ∑ŸÑÿ®</div>
    </div>
  </div>

  <div class="modal log-modal" id="orderLogModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="orderLogTitle">ÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™</h3>
      <p id="orderLogDesc">Ÿäÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÖÿ±ÿ≥ŸÑÿ© ŸÖŸÜ Ÿáÿ∞ÿß ÿßŸÑÿ¨Ÿáÿßÿ≤ ŸáŸÜÿß ŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸäŸáÿß ŸÑÿßÿ≠ŸÇŸãÿß.</p>
      <div style="display:flex;gap:8px;align-items:center">
        <label for="orderLogCustomerSelect" id="orderLogCustomerLabel" style="font-size:13px;color:var(--muted)">ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ</label>
        <select id="orderLogCustomerSelect" style="flex:1;border:1px solid var(--border);background:var(--card);color:var(--text);padding:8px;border-radius:10px"></select>
      </div>
      <div class="log-empty" id="orderLogEmpty">ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ŸÑÿ®ÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.</div>
      <div class="log-list" id="orderLogList"></div>
      <div class="actions">
        <button class="btn" id="orderLogCloseBtn">ÿ•ÿ∫ŸÑÿßŸÇ</button>
        <button class="btn ghost" id="orderLogClearBtn">üßπ <span id="orderLogClearLabel">ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≥ÿ¨ŸÑ</span></button>
      </div>
    </div>
  </div>

  <div class="modal profile-modal" id="profileModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="profileModalTitle">ÿ®ŸäÿßŸÜÿßÿ™ŸÉ</h3>
      <p id="profileModalDesc">ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖŸÉ Ÿàÿ±ŸÇŸÖ ÿ¨ŸàÿßŸÑŸÉ ŸÑŸÜÿ±ÿ≠ÿ® ÿ®ŸÉ ÿØÿßÿ¶ŸÖÿßŸã ŸÉŸÖÿß ÿ™ÿ≠ÿ®.</p>
      <div>
        <label for="profileName" id="profileNameLabel">ÿßŸÑÿßÿ≥ŸÖ</label>
        <input id="profileName" placeholder="ÿßÿ≥ŸÖŸÉ ÿßŸÑÿ¨ŸÖŸäŸÑ" autocomplete="name">
      </div>
      <div>
        <label for="profilePhone" id="profilePhoneLabel">ÿ±ŸÇŸÖ ÿßŸÑÿ¨ŸàÿßŸÑ</label>
        <input id="profilePhone" placeholder="05xxxxxxxx" inputmode="tel" autocomplete="tel">
        <div class="note" id="profileModalNote">ÿ™ÿ∏Ÿáÿ± Ÿáÿ∞Ÿá ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÅŸÇÿ∑ ŸÑÿÆÿØŸÖÿ™ŸÉŸÖ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ.</div>
      </div>
      <div class="actions">
        <button class="btn" id="profileSkipBtn">ŸÑÿßÿ≠ŸÇÿßŸã</button>
        <button class="btn primary" id="profileSaveBtn">ÿ≠ŸÅÿ∏</button>
      </div>
    </div>
  </div>

  <div class="modal loyalty-modal" id="loyaltyModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="loyaltyTitle">ÿπŸÖŸäŸÑŸÜÿß ÿßŸÑŸÖŸÖŸäÿ≤</h3>
      <p id="loyaltyMessage">ÿ¥ŸÉÿ±ÿßŸã ŸÑÿßÿÆÿ™Ÿäÿßÿ±ŸÉ ŸÖÿ¥ÿ±Ÿàÿ®ŸÜÿß ÿßŸÑŸÖŸÅÿ∂ŸÑ.</p>
      <div class="actions" style="justify-content:center">
        <button class="btn primary" id="loyaltyCloseBtn">ÿ™ŸÖÿßŸÖ</button>
      </div>
    </div>
  </div>

  <script>
    const TELEGRAM_BOT_TOKEN = '8234122453:AAGmkEFETh1yuXzgDHChoTu0YFuD0BeVK8c';
    const TELEGRAM_CHAT_ID = '5070730903';

    let lang = localStorage.getItem('nima.lang') || 'ar';
    const STRINGS = {
      ar: {
        title:'ŸÖŸÜŸäŸà ŸÜŸäŸÖÿ©', tagline:'ŸÇÿßÿ¶ŸÖÿ© ÿ¨ŸàÿßŸÑ ‚Ä¢ ÿ´ŸÜÿßÿ¶Ÿäÿ© ÿßŸÑŸÑÿ∫ÿ© ‚Ä¢ ÿØÿßŸÉŸÜ/ŸÅÿßÿ™ÿ≠', search:'ÿßÿ®ÿ≠ÿ´ ÿ®ÿßÿ≥ŸÖ ÿßŸÑÿµŸÜŸÅ‚Ä¶ (ŸÖÿ´ÿßŸÑ: ŸÑÿßÿ™ŸäŸáÿå ŸÖŸàŸáŸäÿ™Ÿà)',
        hot_drinks:'ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿßŸÑÿ≥ÿßÿÆŸÜÿ©', cold_drinks:'ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿßŸÑÿ®ÿßÿ±ÿØÿ©', dessert:'ÿßŸÑÿ≠ŸéŸÑŸéŸâ', call_waiter:'ÿ∑ŸÑÿ® ÿßŸÑŸÜÿßÿØŸÑ',
        table:'ÿ∑ÿßŸàŸÑÿ©', footer:'¬© ŸÜŸäŸÖÿ© ŸÉÿßŸÅŸäŸá ‚Äî ŸÇÿßÿ¶ŸÖÿ© ÿ™ŸÅÿßÿπŸÑŸäÿ© ŸÑŸÑÿ¨ŸàÿßŸÑ',
        select_table:'ÿßÿÆÿ™ÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ©', table_modal_title:'ÿ≠ÿØÿØ ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ©',
        table_modal_desc:'Ÿäÿ¨ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ© ŸÇÿ®ŸÑ ŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿ∑ŸÑÿ®.',
        table_modal_note:'ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ© ŸÖŸàÿ¨ŸàÿØ ÿπŸÑŸâ ÿßŸÑÿ®ÿßÿ±ŸÉŸàÿØ ÿπŸÑŸâ ÿßŸÑÿ∑ÿßŸàŸÑÿ©.',
        table_modal_error:'Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿ±ŸÇŸÖ ÿßŸÑÿ∑ÿßŸàŸÑÿ© ŸÑÿ•ÿ™ŸÖÿßŸÖ ÿßŸÑÿ∑ŸÑÿ®',
        order_time_label:'ŸàŸÇÿ™ ÿßŸÑÿ∑ŸÑÿ®', order_id_label:'ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®',
        confirm:'ÿ™ÿ£ŸÉŸäÿØ', cancel:'ÿ•ŸÑÿ∫ÿßÿ°', cart_empty:'ÿßŸÑÿ≥ŸÑÿ© ŸÅÿßÿ±ÿ∫ÿ©',
        order_log_button:'ÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™', order_log_title:'ÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™',
        order_log_desc:'Ÿäÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÖÿ±ÿ≥ŸÑÿ© ŸÖŸÜ Ÿáÿ∞ÿß ÿßŸÑÿ¨Ÿáÿßÿ≤ ŸáŸÜÿß ŸÑŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸäŸáÿß ŸÑÿßÿ≠ŸÇŸãÿß.',
        order_log_empty:'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ŸÑÿ®ÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.',
        order_log_empty_customer:'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ŸÑÿ®ÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ŸÑŸáÿ∞ÿß ÿßŸÑÿπŸÖŸäŸÑ ÿ®ÿπÿØ.',
        order_log_customer_label:'ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ',
        order_log_guest:'ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ∂ŸäŸàŸÅ',
        clear_log:'ÿ≠ÿ∞ŸÅ ÿßŸÑÿ≥ÿ¨ŸÑ', clear_log_confirm:'ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ≠ÿ∞ŸÅ ÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÑŸáÿ∞ÿß ÿßŸÑÿπŸÖŸäŸÑÿü',
        order_sent_saved:'ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠ ‚úÖ ‚Äî ÿ≠ŸèŸÅÿ∏ ÿßŸÑÿ∑ŸÑÿ® ŸÅŸä ÿßŸÑÿ≥ÿ¨ŸÑ.',
        order_send_failed:'ÿ™ÿπÿ∞Ÿëÿ± ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ® ‚ùå',
        greeting_guest:'ŸÖÿ±ÿ≠ÿ®ÿß ÿ∂ŸäŸÅŸÜÿß ÿßŸÑÿπÿ≤Ÿäÿ≤', greeting_named:'ŸÖÿ±ÿ≠ÿ®ÿß {name}', greeting_toast:'ŸÖÿ±ÿ≠ÿ®ÿß {name}! ŸÜŸàÿ±ÿ™ ÿßŸÑŸÖŸÉÿßŸÜ Ÿàÿ™ÿ≠ÿ™ ÿ∏ŸÑ ÿßŸÑŸÜŸäŸÖÿ© ü§é',
        profile_button:'üë§ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™',
        profile_modal_title:'ÿ®ŸäÿßŸÜÿßÿ™ŸÉ', profile_modal_desc:'ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖŸÉ Ÿàÿ±ŸÇŸÖ ÿ¨ŸàÿßŸÑŸÉ ŸÑŸÜÿ±ÿ≠ÿ® ÿ®ŸÉ ÿØÿßÿ¶ŸÖÿßŸã ŸÉŸÖÿß ÿ™ÿ≠ÿ®.',
        profile_name_label:'ÿßŸÑÿßÿ≥ŸÖ', profile_phone_label:'ÿ±ŸÇŸÖ ÿßŸÑÿ¨ŸàÿßŸÑ',
        profile_name_placeholder:'ÿßÿ≥ŸÖŸÉ ÿßŸÑÿ¨ŸÖŸäŸÑ', profile_phone_placeholder:'05xxxxxxxx',
        profile_note:'ÿ™ÿ∏Ÿáÿ± Ÿáÿ∞Ÿá ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÑŸâ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÅŸÇÿ∑ ŸÑÿÆÿØŸÖÿ™ŸÉŸÖ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ.',
        profile_skip:'ŸÑÿßÿ≠ŸÇÿßŸã', profile_save:'ÿ≠ŸÅÿ∏', profile_saved:'ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿ®ŸäÿßŸÜÿßÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠ ü§é', profile_required:'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿßÿ≥ŸÖ ÿ£Ÿà ÿ±ŸÇŸÖ ÿßŸÑÿ¨ŸàÿßŸÑ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ.',
        discount_label:'ŸÉŸàÿØ ÿßŸÑÿÆÿµŸÖ (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä)', discount_placeholder:'ÿ£ÿØÿÆŸÑ ŸÉŸàÿØ ÿßŸÑÿÆÿµŸÖ', discount_code_label:'ŸÉŸàÿØ ÿßŸÑÿÆÿµŸÖ',
        customer_name_label:'ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ', customer_phone_label:'ÿ±ŸÇŸÖ ÿßŸÑÿ™ŸàÿßÿµŸÑ',
        loyalty_title:'ÿπŸÖŸäŸÑŸÜÿß ÿßŸÑŸÖŸÖŸäÿ≤',
        loyalty_message:'ÿ¥ŸÉÿ±ÿßŸã ŸÖŸÜ ÿßŸÑŸÇŸÑÿ® Ÿäÿß {name}! ÿ®ÿπÿØ ÿ£ÿ±ÿ®ÿπ ŸÖÿ±ÿßÿ™ ŸÖŸÜ ÿ∑ŸÑÿ® <strong>{drink}</strong> ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ® ÿßŸÑÿÆÿßŸÖÿ≥ ÿπŸÑŸäŸÜÿß ŸÖÿ¨ÿßŸÜÿßŸã. ÿ™ŸÅÿ∂ŸÑ ŸÑŸÑŸÉÿßÿ¥Ÿäÿ± Ÿàÿ≥ÿ¨ŸÑ ÿ®ŸäÿßŸÜÿßÿ™ŸÉ ŸÑÿ™ŸÜÿ∂ŸÖ ŸÑÿπÿßÿ¶ŸÑÿ© ŸÜŸäŸÖÿ© ü§é',
        loyalty_button:'ÿ™ŸÖÿßŸÖ',
        loyalty_reward_label:'ŸáÿØŸäÿ© ÿßŸÑŸàŸÑÿßÿ°',
        loyalty_discount_label:'ÿÆÿµŸÖ ÿßŸÑŸàŸÑÿßÿ°',
        order_log_loyalty_reward:'ŸáÿØŸäÿ© ÿßŸÑŸàŸÑÿßÿ°'
      },
      en: {
        title:'Neema Menu', tagline:'Mobile Menu ‚Ä¢ Bilingual ‚Ä¢ Dark/Light', search:'Search item‚Ä¶ (e.g., Latte, Mojito)',
        hot_drinks:'Hot Drinks', cold_drinks:'Cold Drinks', dessert:'Dessert', call_waiter:'Call Waiter',
        table:'Table', footer:'¬© Neema Caf√© ‚Äî Interactive Mobile Menu',
        select_table:'Select a table number', table_modal_title:'Choose your table',
        table_modal_desc:'Please pick a table number before continuing.',
        table_modal_note:'The table number is printed on the barcode at your table.',
        table_modal_error:'Please choose a table number to continue',
        order_time_label:'Order time', order_id_label:'Order ID',
        confirm:'Confirm', cancel:'Cancel', cart_empty:'Cart is empty',
        order_log_button:'Order Log', order_log_title:'Order Log',
        order_log_desc:'Orders sent from this device are saved here so you can review them later.',
        order_log_empty:'No orders have been saved yet.',
        order_log_empty_customer:'No orders saved for this customer yet.',
        order_log_customer_label:'Choose customer',
        order_log_guest:'Guest orders',
        clear_log:'Clear log', clear_log_confirm:'Clear this customer\'s log?',
        order_sent_saved:'Order sent ‚úÖ ‚Äî Saved to log.',
        order_send_failed:'Failed to send ‚ùå',
        greeting_guest:'Welcome, dear guest', greeting_named:'Hello {name}', greeting_toast:'Welcome back {name}! You light up Neema ü§é',
        profile_button:'üë§ Update info',
        profile_modal_title:'Your details', profile_modal_desc:'Share your name and phone so we can greet you properly.',
        profile_name_label:'Name', profile_phone_label:'Phone',
        profile_name_placeholder:'Your name', profile_phone_placeholder:'+9665...',
        profile_note:'We only use this info to serve you better on orders.',
        profile_skip:'Later', profile_save:'Save', profile_saved:'Your details are saved ü§é', profile_required:'Please enter at least a name or phone number.',
        discount_label:'Discount code (optional)', discount_placeholder:'Enter discount code', discount_code_label:'Discount code',
        customer_name_label:'Customer name', customer_phone_label:'Phone',
        loyalty_title:'VIP Guest',
        loyalty_message:'Thank you so much, {name}! After four {drink} orders, this fifth one is on us. Please see the cashier so we can welcome you into the Neema family ü§é',
        loyalty_button:'Got it',
        loyalty_reward_label:'Loyalty treat',
        loyalty_discount_label:'Loyalty discount',
        order_log_loyalty_reward:'Loyalty treat'
      }
    };

    const IMG = 'https://i.postimg.cc/g0g9RwM0/Untitled-design-9.png';
    const data = {
      hot:{coffee:[{ar:'ŸÑÿßÿ™ŸäŸá',en:'Latte',price:12,img:IMG},{ar:'ÿßÿ≥ÿ®ÿ±Ÿäÿ≥Ÿà',en:'Espresso',price:6,img:IMG}],tea:[{ar:'ÿ¥ÿßŸä',en:'Tea',price:3,img:IMG}]},
      cold:{coffee:[{ar:'ŸÑÿßÿ™ŸäŸá ŸÖÿ´ŸÑÿ¨',en:'Iced Latte',price:12,img:IMG}],mojito:[{ar:'ŸÖŸàŸáŸäÿ™Ÿà',en:'Mojito',price:17,img:IMG}],other:[{ar:'ŸÉÿ±ŸÉÿØŸäŸá',en:'Hibiscus',price:8,img:IMG}]},
      dessert:{cake:[{ar:'ŸÜŸäŸÖÿ© ŸÉŸäŸÉ',en:'Nima Cake',price:18,img:IMG}],side:[{ar:'ŸÑŸÇŸäŸÖÿßÿ™',en:'Luqaimat',price:13,img:IMG}]}
    };

    const $ = s=>document.querySelector(s);
    let cart = [];
    let selectedTable = '';
    const ORDER_LOG_KEY = 'nima.orderLog';
    const CUSTOMER_PROFILE_KEY = 'nima.customerProfile';
    const CUSTOMER_REGISTRY_KEY = 'nima.customerRegistry';
    const LOYALTY_KEY = 'nima.loyaltyTracker';
    const SESSION_GREETING_KEY = 'nima.greetedSession';
    let customerProfile = loadCustomerProfile();
    let customerRegistry = loadCustomerRegistry();
    let orderLog = loadOrderLog();
    let loyaltyState = loadLoyaltyState();
    let currentDiscountCode = '';
    let currentLogViewId = '';
    let pendingTableAction = null;
    let restoreCartVisibility = false;

    function escapeHtml(str){
      return String(str || '').replace(/[&<>"']/g, c=>({
        '&':'&amp;',
        '<':'&lt;',
        '>':'&gt;',
        '"':'&quot;',
        "'":'&#39;'
      }[c]));
    }

    function loadCustomerProfile(){
      try{
        const raw = JSON.parse(localStorage.getItem(CUSTOMER_PROFILE_KEY) || 'null');
        if(raw && typeof raw === 'object') return raw;
      }catch(e){}
      return {};
    }

    function saveCustomerProfileData(profile){
      if(!profile || typeof profile !== 'object') return;
      customerProfile = profile;
      localStorage.setItem(CUSTOMER_PROFILE_KEY, JSON.stringify(customerProfile));
    }

    function loadCustomerRegistry(){
      try{
        const raw = JSON.parse(localStorage.getItem(CUSTOMER_REGISTRY_KEY) || 'null');
        if(raw && typeof raw === 'object') return raw;
      }catch(e){}
      return {};
    }

    function saveCustomerRegistry(){
      try{ localStorage.setItem(CUSTOMER_REGISTRY_KEY, JSON.stringify(customerRegistry)); }
      catch(e){ console.warn('Unable to persist customer registry', e); }
    }

    function ensureCustomerRegistryEntry(id, profile={}){
      if(!id) return;
      if(!customerRegistry || typeof customerRegistry !== 'object') customerRegistry = {};
      const existing = customerRegistry[id] || {};
      customerRegistry[id] = {
        name: profile.name !== undefined ? profile.name : (existing.name || ''),
        phone: profile.phone !== undefined ? profile.phone : (existing.phone || '')
      };
      saveCustomerRegistry();
    }

    function generateCustomerId(name='', phone=''){
      const phoneClean = (phone || '').replace(/\D+/g,'');
      if(phoneClean) return `cust-${phoneClean}`;
      const base = (name || '').trim().toLowerCase().replace(/[^\w\u0600-\u06FF]+/g,'-').replace(/^-+|-+$/g,'');
      if(base) return `cust-${base}`;
      return (customerProfile && customerProfile.id) ? customerProfile.id : 'guest';
    }

    function getActiveCustomerId(){
      return (customerProfile && customerProfile.id) ? customerProfile.id : 'guest';
    }

    function loadOrderLog(){
      let stored = null;
      try{ stored = JSON.parse(localStorage.getItem(ORDER_LOG_KEY) || 'null'); }
      catch(e){ stored = null; }
      if(Array.isArray(stored)){
        return { customers:{ guest:{ profile:{ name:'', phone:'' }, orders: stored } } };
      }
      if(!stored || typeof stored !== 'object') stored = { customers:{} };
      if(!stored.customers || typeof stored.customers !== 'object') stored.customers = {};
      return stored;
    }

    function ensureCustomerLog(id, profile){
      if(!id) id = 'guest';
      if(!orderLog || typeof orderLog !== 'object') orderLog = { customers:{} };
      if(!orderLog.customers || typeof orderLog.customers !== 'object') orderLog.customers = {};
      if(!orderLog.customers[id]){
        orderLog.customers[id] = { profile:{ name:'', phone:'' }, orders:[] };
      }
      if(profile){
        if(profile.name) orderLog.customers[id].profile.name = profile.name;
        if(profile.phone) orderLog.customers[id].profile.phone = profile.phone;
      }
      return orderLog.customers[id];
    }

    function saveOrderLog(){
      try{ localStorage.setItem(ORDER_LOG_KEY, JSON.stringify(orderLog)); }
      catch(e){ console.warn('Unable to persist order log', e); }
    }

    function loadLoyaltyState(){
      try{
        const raw = JSON.parse(localStorage.getItem(LOYALTY_KEY) || 'null');
        if(raw && typeof raw === 'object') return raw;
      }catch(e){}
      return {};
    }

    function saveLoyaltyState(){
      try{ localStorage.setItem(LOYALTY_KEY, JSON.stringify(loyaltyState)); }
      catch(e){ console.warn('Unable to persist loyalty tracker', e); }
    }

    function getCustomerLabel(id){
      if(!id) return STRINGS[lang].order_log_guest;
      if(customerProfile && customerProfile.id === id && customerProfile.name){
        return customerProfile.name;
      }
      const reg = customerRegistry && customerRegistry[id];
      if(reg && reg.name) return reg.name;
      const stored = orderLog && orderLog.customers && orderLog.customers[id];
      if(stored && stored.profile && stored.profile.name) return stored.profile.name;
      if(id === 'guest') return STRINGS[lang].order_log_guest;
      return `${STRINGS[lang].customer_name_label} ${id}`;
    }

    function getOrdersForCustomer(id){
      const bucket = ensureCustomerLog(id);
      return Array.isArray(bucket.orders) ? bucket.orders : [];
    }

    const tableSelect = document.getElementById('table');
    const tableModalEl = document.getElementById('tableModal');
    const tablePromptSelect = document.getElementById('tablePrompt');
    const tablePromptError = document.getElementById('tablePromptError');
    const tableConfirmBtn = document.getElementById('tableConfirmBtn');
    const tableCancelBtn = document.getElementById('tableCancelBtn');
    const tableModalBackdrop = document.querySelector('#tableModal .backdrop');
    const orderLogModalEl = document.getElementById('orderLogModal');
    const orderLogBackdrop = document.querySelector('#orderLogModal .backdrop');
    const orderLogBtn = document.getElementById('orderLogBtn');
    const orderLogCloseBtn = document.getElementById('orderLogCloseBtn');
    const orderLogClearBtn = document.getElementById('orderLogClearBtn');

    function mount(id, arr){
      const root=document.getElementById(id);
      if(!root) return;
      root.innerHTML='';
      arr.forEach(it=>{
        const name = (lang==='ar'?it.ar:it.en);
        const el=document.createElement('div'); el.className='item';
        el.innerHTML = `
          <div class="thumb"><img src="${it.img}" alt="${name}" /></div>
          <div>
            <div class="line"><span class="name">${name}</span><span class="dots"></span><span class="price">${it.price} ÿ±ŸäÿßŸÑ</span></div>
            <div class="sub">${lang==='ar'?'ÿßÿ∂ÿ∫ÿ∑ ÿ≤ÿ± ÿ•ÿ∂ÿßŸÅÿ© ŸÑŸÑÿ≥ŸÑÿ©':'Use Add to Cart button'}</div>
          </div>`;
        const btn = document.createElement('button');
        btn.className='addBtn';
        btn.textContent = lang==='ar'?'ÿ£ÿ∂ŸÅ ŸÑŸÑÿ≥ŸÑÿ©':'Add to Cart';
        btn.addEventListener('click', ev=>{
          ev.stopPropagation();
          ensureTableSelection(()=> addToCart(it));
        });
        el.lastElementChild.appendChild(btn);
        root.appendChild(el);
      });
    }

    function addToCart(item){
      const existing = cart.find(i=>i.ar===item.ar);
      if(existing) existing.qty++;
      else cart.push({...item,qty:1});
      renderCart();
    }

    function renderCart(){
      const container = document.getElementById('cart-items');
      const cartBox = document.getElementById('cart');
      if(!container || !cartBox) return;
      container.innerHTML='';
      cart.forEach(i=>{
        const name = lang==='ar'?i.ar:i.en;
        const alt = lang==='ar'?i.en:i.ar;
        const row=document.createElement('div');
        const span=document.createElement('span');
        span.textContent = `${name} (${alt}) x${i.qty} = ${formatPrice(i.price*i.qty)}`;
        const btn=document.createElement('button');
        btn.textContent='‚ùå';
        btn.addEventListener('click',()=> removeFromCart(i.ar));
        row.appendChild(span);
        row.appendChild(btn);
        container.appendChild(row);
      });
      const subtotal = cart.reduce((sum,i)=>sum + i.price*i.qty,0);
      const loyaltyCalc = calculateLoyaltyRewards(cart.map(i=>({ name_ar:i.ar, name_en:i.en, qty:i.qty, price:i.price })));
      const loyaltyDiscount = loyaltyCalc.discount;
      const loyaltyRewards = loyaltyCalc.rewards;
      const total = Math.max(subtotal - loyaltyDiscount, 0);
      const totalEl = document.getElementById('cart-total');
      if(totalEl) totalEl.textContent = formatPrice(total);
      const loyaltyNoteEl = document.getElementById('cart-loyalty-note');
      if(loyaltyNoteEl){
        if(loyaltyDiscount > 0 && loyaltyRewards.length){
          const currency = lang==='ar'?'ÿ±ŸäÿßŸÑ':'SAR';
          const parts = loyaltyRewards.map(reward=>{
            const drink = lang==='ar' ? (reward.drink_ar || reward.drink_en || '') : (reward.drink_en || reward.drink_ar || '');
            const qty = reward.freebies || 1;
            const discount = Number(reward.discount) || 0;
            return `${drink} √ó${qty} (‚àí${discount} ${currency})`;
          });
          loyaltyNoteEl.textContent = `üéÅ ${STRINGS[lang].loyalty_reward_label}: ${parts.join(' ‚Ä¢ ')}`;
          loyaltyNoteEl.style.display = 'block';
        } else {
          loyaltyNoteEl.style.display = 'none';
          loyaltyNoteEl.textContent = '';
        }
      }
      cartBox.style.display = cart.length?'block':'none';
      const discountEl = document.getElementById('discountInput');
      if(discountEl && discountEl !== document.activeElement){
        discountEl.value = currentDiscountCode;
      }
    }

    const discountInputEl = document.getElementById('discountInput');
    if(discountInputEl){
      discountInputEl.addEventListener('input', ()=>{
        currentDiscountCode = discountInputEl.value.trim();
      });
    }

    function resetDiscountCode(){
      currentDiscountCode = '';
      if(discountInputEl) discountInputEl.value = '';
    }

    function calculateLoyaltyRewards(cartItems){
      const rewards = [];
      let totalDiscount = 0;
      (cartItems || []).forEach(it=>{
        if(!it) return;
        const key = (it.name_en || it.name_ar || '').toLowerCase();
        if(!key) return;
        const record = loyaltyState[key] || { count:0, rewardLevel:0, drink_ar: it.name_ar || '', drink_en: it.name_en || '' };
        const startCount = Number(record.count) || 0;
        const qty = Number(it.qty) || 0;
        if(!qty) return;
        const freebies = Math.floor((startCount + qty) / 5) - Math.floor(startCount / 5);
        if(freebies > 0){
          const price = Number(it.price) || 0;
          const discount = freebies * price;
          totalDiscount += discount;
          rewards.push({
            key,
            freebies,
            discount,
            drink_ar: it.name_ar || record.drink_ar || '',
            drink_en: it.name_en || record.drink_en || ''
          });
        }
      });
      return { rewards, discount: totalDiscount };
    }

    function handleLoyaltyRewards(entry){
      if(!entry || !Array.isArray(entry.items)) return;
      let rewardInfo = null;
      entry.items.forEach(it=>{
        const key = ((it && (it.name_en || it.name_ar)) || '').toLowerCase();
        if(!key) return;
        const qty = Number(it && it.qty) || 1;
        const record = loyaltyState[key] || { count:0, rewardLevel:0, drink_ar: it.name_ar || '', drink_en: it.name_en || '' };
        record.count += qty;
        if(it.name_ar) record.drink_ar = it.name_ar;
        if(it.name_en) record.drink_en = it.name_en;
        const milestone = Math.floor(record.count / 5);
        if(milestone > (record.rewardLevel || 0) && !rewardInfo){
          rewardInfo = { drink_ar: record.drink_ar, drink_en: record.drink_en };
        }
        record.rewardLevel = Math.max(record.rewardLevel || 0, milestone);
        loyaltyState[key] = record;
      });
      saveLoyaltyState();
      if(rewardInfo) showLoyaltyModal(rewardInfo);
    }

    function recordOrderLog(entry){
      if(!entry || typeof entry !== 'object') return;
      const customerId = getActiveCustomerId();
      const profile = {
        name: customerProfile && customerProfile.name ? customerProfile.name : '',
        phone: customerProfile && customerProfile.phone ? customerProfile.phone : ''
      };
      ensureCustomerRegistryEntry(customerId, profile);
      const bucket = ensureCustomerLog(customerId, profile);
      bucket.orders.unshift(entry);
      if(bucket.orders.length>100) bucket.orders.length = 100;
      saveOrderLog();
      renderOrderLog(customerId);
    }

    function formatPrice(value){
      const amount = Number(value) || 0;
      return `${amount} ${lang==='ar'?'ÿ±ŸäÿßŸÑ':'SAR'}`;
    }

    function formatLogTime(timestamp){
      if(!timestamp) return '';
      const date = new Date(timestamp);
      const options = { dateStyle:'short', timeStyle:'short' };
      if(typeof Intl !== 'undefined' && Intl.DateTimeFormat){
        try{ return new Intl.DateTimeFormat(lang==='ar'?'ar-SA':'en-GB', options).format(date); }
        catch(e){}
      }
      return date.toLocaleString();
    }

    function renderOrderLog(preferredId){
      const list = document.getElementById('orderLogList');
      const empty = document.getElementById('orderLogEmpty');
      const selectEl = document.getElementById('orderLogCustomerSelect');
      if(!list || !empty) return;
      const activeId = preferredId || currentLogViewId || getActiveCustomerId();
      currentLogViewId = activeId;
      const optionIds = new Set(['guest']);
      if(customerProfile && customerProfile.id){
        optionIds.add(customerProfile.id);
        ensureCustomerRegistryEntry(customerProfile.id, customerProfile);
        ensureCustomerLog(customerProfile.id, customerProfile);
      }
      Object.keys(customerRegistry || {}).forEach(id=> optionIds.add(id));
      if(orderLog && orderLog.customers){
        Object.keys(orderLog.customers).forEach(id=> optionIds.add(id));
      }
      const options = Array.from(optionIds).map(id=>({ id, label: getCustomerLabel(id) }));
      options.sort((a,b)=> a.label.localeCompare(b.label, lang==='ar'?'ar':'en', { sensitivity:'base' }));
      if(selectEl){
        selectEl.innerHTML='';
        options.forEach(opt=>{
          const o=document.createElement('option');
          o.value = opt.id;
          o.textContent = opt.label;
          selectEl.appendChild(o);
        });
        if(options.some(opt=>opt.id===activeId)){
          selectEl.value = activeId;
        } else if(options.length){
          currentLogViewId = options[0].id;
          selectEl.value = currentLogViewId;
        }
      }
      const orders = getOrdersForCustomer(currentLogViewId);
      list.innerHTML='';
      if(!orders.length){
        empty.style.display='block';
        empty.textContent = STRINGS[lang].order_log_empty_customer || STRINGS[lang].order_log_empty;
        return;
      }
      empty.style.display='none';
      orders.forEach(entry=>{
        const orderId = entry && (entry.orderId || entry.id || entry.code) ? (entry.orderId || entry.id || entry.code) : '#';
        const totalValue = Number(entry && entry.total) || 0;
        const metaParts = [];
        if(entry && entry.table){ metaParts.push(`${STRINGS[lang].table} ${entry.table}`); }
        if(entry && entry.timestamp){
          const timeText = formatLogTime(entry.timestamp);
          if(timeText) metaParts.push(timeText);
        }
        if(entry && entry.discountCode){ metaParts.push(`${STRINGS[lang].discount_code_label}: ${entry.discountCode}`); }
        if(entry && Number(entry.loyaltyDiscount) > 0){
          const discountValue = Number(entry.loyaltyDiscount);
          metaParts.push(`${STRINGS[lang].loyalty_discount_label}: -${discountValue} ${lang==='ar'?'ÿ±ŸäÿßŸÑ':'SAR'}`);
        }
        if(entry && entry.customer && entry.customer.phone){
          metaParts.push(`${STRINGS[lang].customer_phone_label}: ${entry.customer.phone}`);
        }
        const item = document.createElement('div');
        item.className='log-entry';
        item.innerHTML = `
          <h4>
            <span>${orderId}</span>
            <span class="total">${formatPrice(totalValue)}</span>
          </h4>
          <div class="meta">${metaParts.join(' ‚Ä¢ ')}</div>
        `;
        if(entry && Array.isArray(entry.items) && entry.items.length){
          const ul = document.createElement('ul');
          ul.className='items';
          entry.items.forEach(it=>{
            const name = lang==='ar' ? (it.name_ar || it.name_en || '') : (it.name_en || it.name_ar || '');
            const opts = it.options && it.options.length ? ` ‚Äî ${it.options.join(lang==='ar'?'ÿå ':' / ')}` : '';
            const qty = it.qty || 1;
            ul.insertAdjacentHTML('beforeend', `<li>${name} √ó${qty}${opts}</li>`);
          });
          item.appendChild(ul);
        }
        if(entry && Array.isArray(entry.loyaltyRewards) && entry.loyaltyRewards.length){
          const note=document.createElement('div');
          note.className='loyalty-note';
          const lines = entry.loyaltyRewards.map(reward=>{
            const drink = lang==='ar' ? (reward.drink_ar || reward.drink_en || '') : (reward.drink_en || reward.drink_ar || '');
            const count = reward.freebies || 1;
            return `${STRINGS[lang].order_log_loyalty_reward}: ${drink} √ó${count}`;
          });
          note.textContent = lines.join(' ‚Ä¢ ');
          item.appendChild(note);
        }
        list.appendChild(item);
      });
      if(selectEl && !selectEl.dataset.bound){
        selectEl.dataset.bound = '1';
        selectEl.addEventListener('change', e=>{
          currentLogViewId = e.target.value || 'guest';
          renderOrderLog(currentLogViewId);
        });
      }
    }

    function removeFromCart(name){
      cart=cart.filter(i=>i.ar!==name);
      renderCart();
    }

    function populateTableOptions(select, disablePlaceholder=true){
      if(!select) return;
      select.innerHTML='';
      const placeholder=document.createElement('option');
      placeholder.value='';
      placeholder.textContent = STRINGS[lang].select_table;
      if(disablePlaceholder) placeholder.disabled = true;
      if(!selectedTable) placeholder.selected = true;
      select.appendChild(placeholder);
      for(let i=1;i<=15;i++){
        const option=document.createElement('option');
        option.value=String(i);
        option.textContent = `${STRINGS[lang].table} ${i}`;
        select.appendChild(option);
      }
      if(selectedTable) select.value = selectedTable;
    }

    function setTableValue(val){
      selectedTable = val || '';
      if(tableSelect) tableSelect.value = selectedTable;
      if(tablePromptSelect) tablePromptSelect.value = selectedTable;
    }

    function getCurrentTableValue(){
      if(selectedTable) return selectedTable;
      return (tableSelect && tableSelect.value) || '';
    }

    function buildTimestampInfo(){
      const now = new Date();
      const options = { dateStyle: 'short', timeStyle: 'short' };
      let timestampAr = now.toLocaleString('ar-SA');
      let timestampEn = now.toLocaleString('en-GB');
      if(typeof Intl !== 'undefined' && Intl.DateTimeFormat){
        try{ timestampAr = new Intl.DateTimeFormat('ar-SA', options).format(now); }catch(e){}
        try{ timestampEn = new Intl.DateTimeFormat('en-GB', options).format(now); }catch(e){}
      }
      return { now, ar: timestampAr, en: timestampEn };
    }

    function fillTables(){
      populateTableOptions(tableSelect, true);
      if(tableSelect){
        tableSelect.onchange = ()=>{
          const val = tableSelect.value;
          if(val){ setTableValue(val); }
        };
      }
    }

    function updateTableModalTexts(){
      const title=document.getElementById('tableModalTitle');
      const desc=document.getElementById('tableModalDesc');
      const note=document.getElementById('tableModalNote');
      if(title) title.textContent = STRINGS[lang].table_modal_title;
      if(desc) desc.textContent = STRINGS[lang].table_modal_desc;
      if(note) note.textContent = STRINGS[lang].table_modal_note;
      if(tableConfirmBtn) tableConfirmBtn.textContent = STRINGS[lang].confirm;
      if(tableCancelBtn) tableCancelBtn.textContent = STRINGS[lang].cancel;
      if(tablePromptError) tablePromptError.textContent = STRINGS[lang].table_modal_error;
      populateTableOptions(tablePromptSelect, false);
    }

    function isCartVisible(){
      const cartBox = document.getElementById('cart');
      return cartBox && cartBox.style.display === 'block';
    }

    function openTableModal(){
      populateTableOptions(tablePromptSelect, false);
      if(tablePromptError) tablePromptError.style.display='none';
      if(tableModalEl){
        tableModalEl.style.display='flex';
        tableModalEl.setAttribute('aria-hidden','false');
        setTimeout(()=>{ if(tablePromptSelect) tablePromptSelect.focus(); },30);
      }
    }

    function closeTableModal(){
      if(tableModalEl){
        tableModalEl.style.display='none';
        tableModalEl.setAttribute('aria-hidden','true');
      }
      if(tablePromptError) tablePromptError.style.display='none';
      pendingTableAction = null;
      restoreCartVisibility = false;
    }

    function ensureTableSelection(action, options={}){
      const forcePrompt = !!options.forcePrompt;
      const restorePref = typeof options.restoreCart === 'boolean' ? options.restoreCart : isCartVisible();
      const current = getCurrentTableValue();
      if(current && !forcePrompt){
        setTableValue(current);
        if(typeof action === 'function') action(current);
        return true;
      }
      pendingTableAction = typeof action === 'function' ? action : null;
      restoreCartVisibility = restorePref;
      openTableModal();
      return false;
    }

    if(tableModalBackdrop) tableModalBackdrop.addEventListener('click', closeTableModal);
    if(tableCancelBtn) tableCancelBtn.addEventListener('click', e=>{ e.preventDefault(); closeTableModal(); });
    if(tablePromptSelect) tablePromptSelect.addEventListener('change', ()=>{ if(tablePromptError) tablePromptError.style.display='none'; });
    if(tableConfirmBtn) tableConfirmBtn.addEventListener('click', e=>{
      e.preventDefault();
      const val = tablePromptSelect ? tablePromptSelect.value : '';
      if(!val){
        if(tablePromptError) tablePromptError.style.display='block';
        if(tablePromptSelect) tablePromptSelect.focus();
        return;
      }
      if(tablePromptError) tablePromptError.style.display='none';
      setTableValue(val);
      if(tableModalEl){
        tableModalEl.style.display='none';
        tableModalEl.setAttribute('aria-hidden','true');
      }
      const action = pendingTableAction;
      const shouldRestore = restoreCartVisibility;
      pendingTableAction = null;
      restoreCartVisibility = false;
      if(shouldRestore){
        const cartBox = document.getElementById('cart');
        if(cartBox && cart.length){ cartBox.style.display='block'; }
      }
      if(action) action(val);
    });

    function openOrderLog(){
      renderOrderLog();
      if(orderLogModalEl){
        orderLogModalEl.style.display='flex';
        orderLogModalEl.setAttribute('aria-hidden','false');
      }
    }

    function closeOrderLog(){
      if(orderLogModalEl){
        orderLogModalEl.style.display='none';
        orderLogModalEl.setAttribute('aria-hidden','true');
      }
    }

    if(orderLogBackdrop) orderLogBackdrop.addEventListener('click', closeOrderLog);
    if(orderLogBtn) orderLogBtn.addEventListener('click', openOrderLog);
    if(orderLogCloseBtn) orderLogCloseBtn.addEventListener('click', e=>{ e.preventDefault(); closeOrderLog(); });
    if(orderLogClearBtn){
      orderLogClearBtn.addEventListener('click', e=>{
        e.preventDefault();
        const targetId = currentLogViewId || getActiveCustomerId();
        const bucket = ensureCustomerLog(targetId);
        if(!bucket.orders.length){ closeOrderLog(); return; }
        if(!window.confirm(STRINGS[lang].clear_log_confirm)) return;
        bucket.orders = [];
        saveOrderLog();
        renderOrderLog(targetId);
      });
    }

    const profileModalEl = document.getElementById('profileModal');
    const profileBackdrop = document.querySelector('#profileModal .backdrop');
    const profileBtnTrigger = document.getElementById('profileBtn');
    const profileNameInput = document.getElementById('profileName');
    const profilePhoneInput = document.getElementById('profilePhone');
    const profileSaveBtn = document.getElementById('profileSaveBtn');
    const profileSkipBtn = document.getElementById('profileSkipBtn');
    let profileForced = false;

    function normalizePhone(value){
      return (value || '').replace(/\s+/g,'').replace(/[^0-9+]/g,'');
    }

    function openProfileModal(force=false){
      profileForced = !!force;
      if(profileModalEl){
        profileModalEl.style.display='flex';
        profileModalEl.setAttribute('aria-hidden','false');
      }
      if(profileSkipBtn) profileSkipBtn.style.display = profileForced ? 'none' : 'inline-flex';
      if(profileNameInput){
        profileNameInput.value = customerProfile.name || '';
        if(profilePhoneInput) profilePhoneInput.value = customerProfile.phone || '';
        setTimeout(()=> profileNameInput.focus(), 40);
      }
    }

    function closeProfileModal(){
      if(profileModalEl){
        profileModalEl.style.display='none';
        profileModalEl.setAttribute('aria-hidden','true');
      }
      profileForced = false;
    }

    function updateGreeting(){
      const textEl = document.getElementById('greetingText');
      const btn = document.getElementById('profileBtn');
      if(btn) btn.textContent = STRINGS[lang].profile_button;
      if(!textEl) return;
      const name = customerProfile && customerProfile.name ? customerProfile.name.trim() : '';
      if(name){
        const safe = escapeHtml(name);
        const template = STRINGS[lang].greeting_named || STRINGS[lang].greeting_guest;
        textEl.innerHTML = template.replace('{name}', `<span class="welcome-name">${safe}</span>`);
      } else {
        textEl.textContent = STRINGS[lang].greeting_guest;
      }
    }

    function maybeToastGreeting(force=false){
      if(!(customerProfile && customerProfile.name)) return;
      const id = customerProfile.id || 'guest';
      const sessionKey = `${SESSION_GREETING_KEY}:${id}`;
      if(!force && sessionStorage.getItem(sessionKey)) return;
      const template = STRINGS[lang].greeting_toast || STRINGS[lang].greeting_named || STRINGS[lang].greeting_guest;
      toast(template.replace('{name}', customerProfile.name));
      sessionStorage.setItem(sessionKey, '1');
    }

    function handleProfileSave(){
      const name = (profileNameInput && profileNameInput.value || '').trim();
      const phone = normalizePhone((profilePhoneInput && profilePhoneInput.value || '').trim());
      if(!name && !phone){
        toast(STRINGS[lang].profile_required);
        if(profileNameInput) profileNameInput.focus();
        return;
      }
      let id = generateCustomerId(name, phone);
      if(!id) id = 'guest';
      const updatedProfile = { id, name, phone };
      saveCustomerProfileData(updatedProfile);
      ensureCustomerRegistryEntry(id, updatedProfile);
      const bucket = ensureCustomerLog(id, updatedProfile);
      if(id !== 'guest' && orderLog && orderLog.customers && orderLog.customers.guest && orderLog.customers.guest.orders.length){
        const guestOrders = orderLog.customers.guest.orders.slice();
        if(guestOrders.length){
          bucket.orders = guestOrders.concat(bucket.orders || []);
          orderLog.customers.guest.orders = [];
        }
      }
      saveOrderLog();
      currentLogViewId = id;
      updateGreeting();
      maybeToastGreeting(true);
      toast(STRINGS[lang].profile_saved);
      closeProfileModal();
      renderOrderLog(id);
    }

    if(profileBtnTrigger) profileBtnTrigger.addEventListener('click', ()=> openProfileModal(false));
    if(profileBackdrop) profileBackdrop.addEventListener('click', ()=>{ if(!profileForced) closeProfileModal(); });
    if(profileSkipBtn) profileSkipBtn.addEventListener('click', e=>{ e.preventDefault(); closeProfileModal(); });
    if(profileSaveBtn) profileSaveBtn.addEventListener('click', e=>{ e.preventDefault(); handleProfileSave(); });

    const loyaltyModalEl = document.getElementById('loyaltyModal');
    const loyaltyBackdrop = document.querySelector('#loyaltyModal .backdrop');
    const loyaltyMessageEl = document.getElementById('loyaltyMessage');
    const loyaltyCloseBtn = document.getElementById('loyaltyCloseBtn');

    function showLoyaltyModal(info){
      if(!loyaltyModalEl) return;
      const drinkName = lang==='ar' ? (info && (info.drink_ar || info.drink_en) || '') : (info && (info.drink_en || info.drink_ar) || '');
      const customerName = customerProfile && customerProfile.name ? customerProfile.name : (lang==='ar'?'ÿ∂ŸäŸÅŸÜÿß ÿßŸÑÿπÿ≤Ÿäÿ≤':'dear guest');
      if(loyaltyMessageEl){
        const safeDrink = escapeHtml(drinkName);
        const safeName = escapeHtml(customerName);
        const template = STRINGS[lang].loyalty_message || '';
        loyaltyMessageEl.innerHTML = template.replace('{drink}', safeDrink).replace('{name}', `<span class="welcome-name">${safeName}</span>`);
      }
      loyaltyModalEl.style.display='flex';
      loyaltyModalEl.setAttribute('aria-hidden','false');
    }

    function closeLoyaltyModal(){
      if(!loyaltyModalEl) return;
      loyaltyModalEl.style.display='none';
      loyaltyModalEl.setAttribute('aria-hidden','true');
    }

    if(loyaltyBackdrop) loyaltyBackdrop.addEventListener('click', closeLoyaltyModal);
    if(loyaltyCloseBtn) loyaltyCloseBtn.addEventListener('click', e=>{ e.preventDefault(); closeLoyaltyModal(); });

    function renderAll(){
      const titleEl = document.getElementById('title');
      const tagEl = document.getElementById('tagline');
      const searchEl = document.getElementById('search');
      const footEl = document.getElementById('foot');
      if(titleEl) titleEl.textContent = STRINGS[lang].title;
      if(tagEl) tagEl.textContent = STRINGS[lang].tagline;
      if(searchEl) searchEl.placeholder = STRINGS[lang].search;
      document.querySelectorAll('[data-i18n="hot_drinks"]').forEach(e=>e.textContent=STRINGS[lang].hot_drinks);
      document.querySelectorAll('[data-i18n="cold_drinks"]').forEach(e=>e.textContent=STRINGS[lang].cold_drinks);
      document.querySelectorAll('[data-i18n="dessert"]').forEach(e=>e.textContent=STRINGS[lang].dessert);
      document.querySelectorAll('[data-i18n="call_waiter"]').forEach(e=>e.textContent=STRINGS[lang].call_waiter);
      if(footEl) footEl.textContent = STRINGS[lang].footer;
      const logBtnLabel = document.getElementById('orderLogBtnLabel');
      if(logBtnLabel) logBtnLabel.textContent = STRINGS[lang].order_log_button;
      const logTitle = document.getElementById('orderLogTitle');
      const logDesc = document.getElementById('orderLogDesc');
      const logEmpty = document.getElementById('orderLogEmpty');
      const logClose = document.getElementById('orderLogCloseBtn');
      const logClear = document.getElementById('orderLogClearLabel');
      if(logTitle) logTitle.textContent = STRINGS[lang].order_log_title;
      if(logDesc) logDesc.textContent = STRINGS[lang].order_log_desc;
      if(logEmpty) logEmpty.textContent = STRINGS[lang].order_log_empty_customer || STRINGS[lang].order_log_empty;
      if(logClose) logClose.textContent = STRINGS[lang].cancel;
      if(logClear) logClear.textContent = STRINGS[lang].clear_log;
      const orderLogCustomerLabel = document.getElementById('orderLogCustomerLabel');
      if(orderLogCustomerLabel) orderLogCustomerLabel.textContent = STRINGS[lang].order_log_customer_label;
      const profileBtnEl = document.getElementById('profileBtn');
      if(profileBtnEl) profileBtnEl.textContent = STRINGS[lang].profile_button;
      const discountLabel = document.getElementById('discountLabel');
      if(discountLabel) discountLabel.textContent = STRINGS[lang].discount_label;
      const discountInput = document.getElementById('discountInput');
      if(discountInput){
        discountInput.placeholder = STRINGS[lang].discount_placeholder;
        if(discountInput !== document.activeElement) discountInput.value = currentDiscountCode;
      }
      const profileTitle = document.getElementById('profileModalTitle');
      if(profileTitle) profileTitle.textContent = STRINGS[lang].profile_modal_title;
      const profileDesc = document.getElementById('profileModalDesc');
      if(profileDesc) profileDesc.textContent = STRINGS[lang].profile_modal_desc;
      const profileNameLabel = document.getElementById('profileNameLabel');
      if(profileNameLabel) profileNameLabel.textContent = STRINGS[lang].profile_name_label;
      const profilePhoneLabel = document.getElementById('profilePhoneLabel');
      if(profilePhoneLabel) profilePhoneLabel.textContent = STRINGS[lang].profile_phone_label;
      if(profileNameInput) profileNameInput.placeholder = STRINGS[lang].profile_name_placeholder;
      if(profilePhoneInput) profilePhoneInput.placeholder = STRINGS[lang].profile_phone_placeholder;
      const profileNote = document.getElementById('profileModalNote');
      if(profileNote) profileNote.textContent = STRINGS[lang].profile_note;
      if(profileSkipBtn) profileSkipBtn.textContent = STRINGS[lang].profile_skip;
      if(profileSaveBtn) profileSaveBtn.textContent = STRINGS[lang].profile_save;
      const loyaltyTitle = document.getElementById('loyaltyTitle');
      if(loyaltyTitle) loyaltyTitle.textContent = STRINGS[lang].loyalty_title;
      if(loyaltyCloseBtn) loyaltyCloseBtn.textContent = STRINGS[lang].loyalty_button;
      document.documentElement.lang = lang==='ar'?'ar':'en';
      document.documentElement.dir = lang==='ar'?'rtl':'ltr';
      mount('hot-coffee', data.hot.coffee);
      mount('hot-tea', data.hot.tea);
      mount('cold-coffee', data.cold.coffee);
      mount('cold-mojito', data.cold.mojito);
      mount('cold-other', data.cold.other);
      mount('dessert-cake', data.dessert.cake);
      mount('dessert-side', data.dessert.side);
      const cartTitle = document.querySelector('#cart h3');
      if(cartTitle) cartTitle.textContent = lang==='ar'?'ÿ≥ŸÑÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™':'Cart';
      const sendOrderBtn = document.getElementById('sendOrder');
      if(sendOrderBtn) sendOrderBtn.textContent = lang==='ar'?'ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ®':'Send Order';
      fillTables();
      updateTableModalTexts();
      renderCart();
      updateGreeting();
      renderOrderLog(currentLogViewId || getActiveCustomerId());
    }

    function performSendOrder(tableOverride){
      const stamp = buildTimestampInfo();
      const table = tableOverride || getCurrentTableValue() || (lang==='ar'?'ÿü':'?');
      const lines = cart.map(i=>`${i.ar} (${i.en}) x${i.qty} = ${i.price*i.qty} SAR`);
      const subtotal = cart.reduce((sum,i)=>sum + i.price*i.qty,0);
      const loyaltyCalc = calculateLoyaltyRewards(cart.map(i=>({
        name_ar:i.ar,
        name_en:i.en,
        qty:i.qty,
        price:i.price
      })));
      const loyaltyDiscount = loyaltyCalc.discount;
      const loyaltyRewards = loyaltyCalc.rewards;
      const total = Math.max(subtotal - loyaltyDiscount, 0);
      const headerAr = `üßæ ÿ∑ŸÑÿ® ÿ¨ÿØŸäÿØ ‚Äî ÿ∑ÿßŸàŸÑÿ© ${table}`;
      const headerEn = `üßæ New Order ‚Äî Table ${table}`;
      const orderId = `N${stamp.now.getTime().toString(36).toUpperCase()}`;
      const timeLine = `üïí ${STRINGS.ar.order_time_label}: ${stamp.ar} | ${STRINGS.en.order_time_label}: ${stamp.en}`;
      const orderIdLine = `üÜî ${STRINGS.ar.order_id_label}: ${orderId} | ${STRINGS.en.order_id_label}: ${orderId}`;
      const discountCode = currentDiscountCode.trim();
      const messageLines = [`${headerAr} | ${headerEn}`, ...lines];
      if(loyaltyRewards.length){
        loyaltyRewards.forEach(reward=>{
          const drinkAr = reward.drink_ar || reward.drink_en || '';
          const drinkEn = reward.drink_en || reward.drink_ar || '';
          messageLines.push(`üéÅ ${STRINGS.ar.loyalty_reward_label}: ${drinkAr} ŸÖÿ¨ÿßŸÜŸä | üéÅ ${STRINGS.en.loyalty_reward_label}: ${drinkEn} is on the house`);
        });
      }
      if(loyaltyDiscount > 0){
        messageLines.push(`üíù ${STRINGS.ar.loyalty_discount_label}: -${loyaltyDiscount} SAR | üíù ${STRINGS.en.loyalty_discount_label}: -${loyaltyDiscount} SAR`);
      }
      if(discountCode){
        messageLines.push(`üéüÔ∏è ${STRINGS.ar.discount_code_label}: ${discountCode} | ${STRINGS.en.discount_code_label}: ${discountCode}`);
      }
      const customerNameValue = customerProfile && customerProfile.name ? customerProfile.name : '';
      const customerPhoneValue = customerProfile && customerProfile.phone ? customerProfile.phone : '';
      if(customerNameValue || customerPhoneValue){
        const nameAr = customerNameValue || '‚Äî';
        const nameEn = customerNameValue || '‚Äî';
        messageLines.push(`üë§ ${STRINGS.ar.customer_name_label}: ${nameAr} | ${STRINGS.en.customer_name_label}: ${nameEn}`);
        if(customerPhoneValue){
          messageLines.push(`üìû ${STRINGS.ar.customer_phone_label}: ${customerPhoneValue} | ${STRINGS.en.customer_phone_label}: ${customerPhoneValue}`);
        }
      }
      messageLines.push(`‚Äî Total: ${total} SAR`, timeLine, orderIdLine);
      const text = messageLines.map(encodeURIComponent).join('%0A');

      const orderEntry = {
        id: orderId,
        orderId,
        table,
        subtotal,
        loyaltyDiscount,
        total,
        timestamp: stamp.now.getTime(),
        discountCode,
        customer: {
          id: getActiveCustomerId(),
          name: customerNameValue || '',
          phone: customerPhoneValue || ''
        },
        loyaltyRewards,
        items: cart.map(i=>({
          name_ar: i.ar,
          name_en: i.en,
          qty: i.qty,
          price: i.price,
          options: []
        }))
      };

      const statusBase = new URL('order-status.html', window.location.href);
      statusBase.search = '';
      statusBase.searchParams.set('order', orderId);
      statusBase.searchParams.set('table', table);
      statusBase.searchParams.set('issued', String(stamp.now.getTime()));
      statusBase.searchParams.set('chat', TELEGRAM_CHAT_ID);
      const acceptUrl = new URL(statusBase.toString());
      acceptUrl.searchParams.set('action', 'accept');

      const replyMarkup = encodeURIComponent(JSON.stringify({
        inline_keyboard:[
          [{ text:'‚úÖ ŸÇÿ®ŸàŸÑ ÿßŸÑÿ∑ŸÑÿ® | Accept', url: acceptUrl.toString() }]
        ]
      }));

      const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${text}&reply_markup=${replyMarkup}`;
      fetch(url)
        .then(res=>{
          if(!res.ok) throw new Error('telegram');
          recordOrderLog(orderEntry);
          handleLoyaltyRewards(orderEntry);
          toast(STRINGS[lang].order_sent_saved);
          cart=[];
          renderCart();
          resetDiscountCode();
        })
        .catch(()=>{
          toast(STRINGS[lang].order_send_failed);
        });
    }

    const sendOrderBtn = document.getElementById('sendOrder');
    if(sendOrderBtn){
      sendOrderBtn.addEventListener('click', ()=>{
        if(!cart.length){ toast(STRINGS[lang].cart_empty); return; }
        ensureTableSelection(tableValue=> performSendOrder(tableValue), { restoreCart: isCartVisible() });
      });
    }

    const callBtn = document.getElementById('callBtn');
    if(callBtn){
      function sendWaiterCall(tableId){
        const fallback = lang==='ar'?'ÿü':'?';
        const t = tableId || fallback;
        const stamp = buildTimestampInfo();
        const timeLine = `üïí ${STRINGS.ar.order_time_label}: ${stamp.ar} | ${STRINGS.en.order_time_label}: ${stamp.en}`;
        const lines = [`üîî ÿ∑ÿßŸàŸÑÿ© ${t} ÿ™ÿ≠ÿ™ÿßÿ¨ ÿÆÿØŸÖÿ©`, `üîî Table ${t} needs service`, timeLine];
        const textParam = lines.map(encodeURIComponent).join('%0A');
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${textParam}`;
        fetch(url).catch(()=>{});
        toast(lang==='ar'?'ÿ™ŸÖ ÿ™ŸÜÿ®ŸäŸá ÿßŸÑŸÜÿßÿØŸÑ Ÿàÿ≥ŸäÿµŸÑ ÿ•ŸÑŸäŸÉ ŸÇÿ±Ÿäÿ®ÿßŸã.':'The waiter has been notified and will arrive shortly.');
      }

      callBtn.addEventListener('click', ()=>{
        ensureTableSelection(tableValue=> sendWaiterCall(tableValue), { forcePrompt:true, restoreCart:false });
      });
    }

    const search = document.getElementById('search');
    if(search){
      search.addEventListener('input', ()=>{
        const q = search.value.trim().toLowerCase();
        const f = arr => arr.filter(x=> (x.ar + x.en).toLowerCase().includes(q));
        if(q){
          mount('hot-coffee', f(data.hot.coffee));
          mount('hot-tea', f(data.hot.tea));
          mount('cold-coffee', f(data.cold.coffee));
          mount('cold-mojito', f(data.cold.mojito));
          mount('cold-other', f(data.cold.other));
          mount('dessert-cake', f(data.dessert.cake));
          mount('dessert-side', f(data.dessert.side));
        } else {
          renderAll();
        }
      });
    }

    const modeBtn = document.getElementById('modeBtn');
    if(modeBtn){
      const initialMode = localStorage.getItem('nima.mode')||'light';
      if(initialMode==='dark') document.body.classList.add('dark');
      modeBtn.textContent = document.body.classList.contains('dark') ? '‚òÄÔ∏è' : 'üåô';
      modeBtn.onclick = ()=>{
        document.body.classList.toggle('dark');
        localStorage.setItem('nima.mode', document.body.classList.contains('dark')?'dark':'light');
        modeBtn.textContent = document.body.classList.contains('dark') ? '‚òÄÔ∏è' : 'üåô';
      };
    }

    const langBtn = document.getElementById('langBtn');
    function updateLangBtn(){ if(langBtn) langBtn.textContent = (lang==='ar') ? 'E' : 'ÿπ'; }
    if(langBtn){
      langBtn.onclick = ()=>{
        lang = (lang==='ar') ? 'en' : 'ar';
        localStorage.setItem('nima.lang', lang);
        renderAll();
        updateLangBtn();
      };
    }

    function toast(msg){
      const t = document.createElement('div');
      t.textContent = msg;
      t.style.position='fixed'; t.style.bottom='80px'; t.style.left='50%'; t.style.transform='translateX(-50%)';
      t.style.padding='12px 20px'; t.style.borderRadius='12px'; t.style.boxShadow='0 4px 12px rgba(0,0,0,0.2)';
      t.style.zIndex='400'; t.style.opacity='0'; t.style.transition='opacity .3s ease';
      t.style.background = document.body.classList.contains('dark') ? 'var(--brand-dark)' : 'var(--brand)';
      t.style.color = '#fff';
      document.body.appendChild(t);
      setTimeout(()=> t.style.opacity='1', 20);
      setTimeout(()=> { t.style.opacity='0'; setTimeout(()=> t.remove(), 300); }, 2500);
    }

    function init(){
      localStorage.removeItem('nima.table');
      if(customerProfile && (customerProfile.name || customerProfile.phone)){
        if(!customerProfile.id){
          customerProfile.id = generateCustomerId(customerProfile.name || '', customerProfile.phone || '');
          saveCustomerProfileData(customerProfile);
        }
        ensureCustomerRegistryEntry(customerProfile.id, customerProfile);
        ensureCustomerLog(customerProfile.id, customerProfile);
      }
      renderAll();
      updateLangBtn();
      if(customerProfile && (customerProfile.name || customerProfile.phone)){
        maybeToastGreeting();
      } else {
        setTimeout(()=> openProfileModal(false), 900);
      }
    }

    init();
  </script>
</body>
</html>
