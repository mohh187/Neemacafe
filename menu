<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>منيو نيمة | Neema Menu — جوال + لغتين + داكن/فاتح</title>
  <style>
    :root{
      --brand:#8b5e3c; --brand-2:#d4a373; --brand-dark:#70492d;
      --bg:#faf8f6; --card:#ffffff; --text:#1f1f1f; --muted:#6b6b6b; --border:#e9e6e3;
      --radius:16px; --shadow:0 10px 24px rgba(0,0,0,.08);
    }
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial; background:var(--bg); color:var(--text);}
    body.dark{ --bg:#0f0f0f; --card:#1a1a1a; --text:#f3f3f3; --muted:#b7b7b7; --border:#2a2a2a; }

    header{position:sticky;top:0;z-index:20;background:rgba(255,255,255,.9);backdrop-filter:saturate(140%) blur(8px);border-bottom:1px solid var(--border)}
    body.dark header{background:rgba(20,20,20,.82)}
    .wrap{max-width:960px;margin-inline:auto;padding:12px 14px}
    .top{display:flex;align-items:center;justify-content:space-between;gap:16px;flex-wrap:wrap}
    .brand{display:flex;align-items:center;gap:12px;flex:1 1 auto;min-width:220px}
    .brand-text{display:flex;flex-direction:column;gap:4px;min-width:0;align-items:flex-start}
    .brand img{width:48px;height:48px;border-radius:12px;border:1px solid var(--border);background:#fff;object-fit:contain}
    .brand h1{font-size:18px;margin:0;line-height:1.2}
    .header-side{display:flex;flex-direction:column;gap:10px;align-items:flex-end;flex:1 1 auto;min-width:260px}
    .actions{display:flex;gap:8px;align-items:center;flex-wrap:wrap;justify-content:flex-end}
    .btn{border:1px solid var(--border);background:var(--card);color:var(--text);padding:8px 10px;border-radius:10px;font-size:14px;cursor:pointer}
    .btn.small{padding:6px 8px;font-size:12px}
    .btn.primary{background:var(--brand);border-color:transparent;color:#fff}
    .btn.ghost{background:transparent}
    .greeting{display:flex;align-items:center;gap:8px;flex-wrap:wrap;justify-content:flex-end;text-align:right;width:100%}
    .greeting span{font-size:13px;color:var(--muted)}
    .greeting .welcome-name{font-weight:700;color:var(--brand)}
    @media(max-width:680px){
      .top{flex-direction:column;align-items:stretch;gap:14px}
      .brand{justify-content:center;text-align:center}
      .brand-text{align-items:center}
      .header-side{align-items:stretch;gap:12px;min-width:0}
      .greeting{justify-content:space-between;text-align:inherit}
      .actions{justify-content:space-between}
      .actions .btn{flex:1 1 0;min-width:110px}
    }
    .search{display:flex;gap:8px;margin:10px 0 8px}
    .search input{flex:1;padding:12px 14px;border-radius:12px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:15px}
    main{max-width:960px;margin-inline:auto;padding:10px 14px 180px}
    details{background:var(--card);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);overflow:hidden;margin:10px 0}
    summary{list-style:none;padding:14px 16px;cursor:pointer;display:flex;align-items:center;gap:10px;font-weight:700}
    summary::marker{display:none}
    .pill{display:inline-block;background:#efe6de;color:#5a3a22;border-radius:999px;padding:3px 8px;font-size:12px;margin-inline-start:6px}
    body.dark .pill{background:#2b221b;color:#d9c3ad}
    .grid{display:grid;grid-template-columns:1fr;gap:10px;padding:8px 12px 14px}
    @media(min-width:520px){.grid{grid-template-columns:repeat(2,1fr)}}
    .item{display:grid;grid-template-columns:72px 1fr;gap:10px;align-items:center;background:var(--card);border:1px solid var(--border);border-radius:14px;padding:10px}
    .thumb{width:72px;height:72px;border-radius:12px;overflow:hidden;border:1px solid var(--border);background:#fafafa}
    .thumb img{width:100%;height:100%;object-fit:contain;background:#fafafa}
    .line{display:flex;align-items:center;gap:8px}
    .name{font-weight:700}
    .dots{flex:1 1 auto;border-bottom:1px dotted #c9c3bd;transform:translateY(-4px);opacity:.6}
    .price{font-weight:800;color:var(--brand)}
    .sub{font-size:12px;color:var(--muted)}
    .addBtn{margin-top:6px;padding:4px 6px;font-size:12px;border-radius:8px;border:1px solid var(--border);cursor:pointer;background:var(--brand-2);color:#fff}

    /* Table modal */
    .modal{position:fixed;inset:0;display:none;align-items:center;justify-content:center;z-index:200}
    .modal .backdrop{position:absolute;inset:0;background:rgba(0,0,0,.45)}
    .table-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:360px;width:100%;box-shadow:var(--shadow);text-align:center}
    .table-modal .sheet h3{margin:0 0 10px}
    .table-modal .sheet p{margin:0 0 16px;color:var(--muted);font-size:14px;line-height:1.6}
    .table-modal .sheet .note{margin:6px 0 16px;font-size:13px;line-height:1.5;color:var(--muted)}
    .table-modal .sheet select{width:100%;padding:12px;border-radius:12px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:15px}
    .table-modal .sheet .actions{display:flex;gap:8px;margin-top:16px}
    .table-modal .sheet .actions .btn{flex:1}
    .table-modal .sheet .error{color:#c0392b;font-size:13px;margin-top:12px;display:none}
    body.dark .table-modal .sheet{background:var(--card);color:var(--text)}
    body.dark .table-modal .sheet .error{color:#e57373}

    /* Option modal */
    .option-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:360px;width:100%;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:12px}
    .option-modal .sheet h3{margin:0}
    .option-modal .sheet p{margin:0;color:var(--muted);font-size:14px;line-height:1.6}
    .option-modal .options{display:flex;flex-direction:column;gap:8px}
    .option-modal .option-choice{display:flex;align-items:center;justify-content:space-between;gap:12px;width:100%;font-size:14px}
    .option-modal .option-choice .option-main{display:flex;align-items:center;gap:10px;min-width:0;flex:1}
    .option-modal .option-choice .thumb{width:42px;height:42px;border-radius:10px;overflow:hidden;border:1px solid var(--border);background:var(--card);flex-shrink:0}
    .option-modal .option-choice .thumb img{width:100%;height:100%;object-fit:cover}
    .option-modal .option-choice .label{font-weight:600;display:block}
    .option-modal .option-choice .price{font-weight:700;color:var(--brand)}
    .option-modal .actions{display:flex;gap:8px;margin-top:4px;justify-content:flex-end}
    body.dark .option-modal .sheet{background:var(--card);color:var(--text)}

    /* Order log modal */
    .log-modal{align-items:center}
    .log-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:420px;width:100%;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:12px;max-height:80vh}
    .log-modal .sheet h3{margin:0}
    .log-modal .sheet p{margin:0;color:var(--muted);font-size:14px;line-height:1.6}
    .log-modal .sheet .log-empty{color:var(--muted);text-align:center;padding:18px 0;font-size:14px}
    .log-modal .sheet .log-list{flex:1 1 auto;overflow:auto;display:flex;flex-direction:column;gap:12px;padding:2px}
    .log-entry{border:1px solid var(--border);border-radius:14px;padding:12px;background:var(--card);box-shadow:0 6px 16px rgba(0,0,0,.04)}
    .log-entry h4{margin:0;font-size:15px;display:flex;align-items:center;justify-content:space-between;gap:10px}
    .log-entry h4 .total{font-weight:800;color:var(--brand)}
    .log-entry .meta{font-size:12px;color:var(--muted);margin-top:6px;display:flex;flex-wrap:wrap;gap:8px}
    .log-entry .items{margin:10px 0 0;padding-inline-start:20px;font-size:13px;color:var(--text)}
    .log-entry .items li{margin-bottom:4px;line-height:1.5}
    .log-entry .loyalty-note{margin-top:8px;font-size:12px;color:var(--brand);font-weight:600}
    .log-modal .sheet .actions{display:flex;gap:8px}

    /* Profile Modal */
    .profile-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:20px;border-radius:18px;max-width:380px;width:100%;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:12px;text-align:start}
    .profile-modal .sheet h3{margin:0}
    .profile-modal .sheet p{margin:0;color:var(--muted);font-size:14px;line-height:1.6}
    .profile-modal .sheet label{font-size:13px;color:var(--muted)}
    .profile-modal .sheet input{width:100%;padding:12px;border-radius:12px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:14px}
    .profile-modal .sheet .note{font-size:12px;color:var(--muted);margin-top:-4px}
    .profile-modal .sheet .actions{display:flex;gap:8px}

    /* Loyalty Modal */
    .loyalty-modal .sheet{position:relative;background:var(--card);color:var(--text);padding:24px;border-radius:18px;max-width:380px;width:100%;box-shadow:var(--shadow);text-align:center;display:flex;flex-direction:column;gap:16px}
    .loyalty-modal .sheet h3{margin:0}
    .loyalty-modal .sheet p{margin:0;font-size:14px;color:var(--muted);line-height:1.6}
    .loyalty-modal .sheet strong,.loyalty-modal .sheet .welcome-name{color:var(--brand)}

    .bar{position:fixed;bottom:0;left:0;right:0;z-index:25;background:var(--card);border-top:1px solid var(--border);padding:10px}
    .bar .inner{max-width:960px;margin-inline:auto;display:flex;gap:8px}
    select, .bar .inner .btn{flex:1}
    footer{color:var(--muted);text-align:center;margin:18px 0 90px}

    /* Cart */
    #cart{position:fixed;bottom:60px;right:10px;width:300px;background:var(--card);border:1px solid var(--border);border-radius:12px;padding:10px;box-shadow:var(--shadow);display:none;z-index:30;overflow:auto;max-height:400px}
    #cart h3{margin:0 0 6px 0;font-size:16px}
    #cart .loyalty-summary{margin-top:6px;font-size:13px;color:var(--brand);font-weight:600}
    #cart div button{margin-left:4px;background:red;color:#fff;border:none;border-radius:6px;padding:2px 4px;cursor:pointer;font-size:12px}
    #cart .discount{display:flex;flex-direction:column;gap:6px;margin:10px 0}
    #cart .discount label{font-size:13px;color:var(--muted)}
    #cart .discount input{padding:10px;border-radius:10px;border:1px solid var(--border);background:var(--card);color:var(--text);font-size:14px}
  </style>
</head>
<body>
  <header>
    <div class="wrap">
      <div class="top">
        <div class="brand">
          <img src="https://i.postimg.cc/g0g9RwM0/Untitled-design-9.png" alt="Neema Menu" />
          <div class="brand-text">
            <h1 id="title">منيو نيمة</h1>
            <span class="pill" id="tagline">قائمة جوال • ثنائية اللغة • داكن/فاتح</span>
          </div>
        </div>
        <div class="header-side">
          <div class="greeting" id="greetingBar">
            <span id="greetingText">مرحبا ضيفنا العزيز</span>
            <button class="btn ghost small" id="profileBtn">👤 تحديث البيانات</button>
          </div>
          <div class="actions">
            <button class="btn ghost" id="orderLogBtn">📜 <span id="orderLogBtnLabel">سجل الطلبات</span></button>
            <button class="btn" id="langBtn">E</button>
            <button class="btn" id="modeBtn">🌙</button>
          </div>
        </div>
      </div>
      <div class="search">
        <input id="search" placeholder="ابحث باسم الصنف… (مثال: لاتيه، موهيتو)">
      </div>
    </div>
  </header>

  <main>
    <details open>
      <summary>🔥 <span data-i18n="hot_drinks">المشروبات الساخنة</span></summary>
      <div class="grid" id="hot-coffee"></div>
      <div class="grid" id="hot-tea"></div>
    </details>
    <details>
      <summary>❄️ <span data-i18n="cold_drinks">المشروبات الباردة</span></summary>
      <div class="grid" id="cold-coffee"></div>
      <div class="grid" id="cold-mojito"></div>
      <div class="grid" id="cold-other"></div>
    </details>
    <details>
      <summary>🍰 <span data-i18n="dessert">الحَلَى</span></summary>
      <div class="grid" id="dessert-cake"></div>
      <div class="grid" id="dessert-side"></div>
    </details>

    <footer>
      <div id="foot">© نيمة كافيه — قائمة تفاعلية للجوال</div>
    </footer>
  </main>

  <!-- Bottom bar -->
  <div class="bar">
    <div class="inner">
      <select id="table"></select>
      <button class="btn primary" id="sendBarBtn">🚀 <span data-i18n="send_order">إرسال الطلب</span></button>
      <button class="btn" id="callBtn">🔔 <span data-i18n="call_waiter">طلب النادل</span></button>
    </div>
  </div>

  <!-- Cart -->
  <div id="cart">
    <h3>سلة الطلبات / Cart</h3>
    <div id="cart-items"></div>
    <div style="margin-top:8px;"><strong>الإجمالي / Total: </strong><span id="cart-total">0</span></div>
    <div class="loyalty-summary" id="cart-loyalty-note" style="display:none"></div>
    <div class="discount">
      <label for="discountInput" id="discountLabel">كود الخصم (اختياري)</label>
      <input id="discountInput" placeholder="أدخل كود الخصم" autocomplete="off">
    </div>
    <button id="sendOrder" class="btn primary" style="margin-top:8px;">إرسال الطلب / Send Order</button>
  </div>

  <!-- Table Selection Modal -->
  <div class="modal table-modal" id="tableModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="tableModalTitle">حدد رقم الطاولة</h3>
      <p id="tableModalDesc">يجب اختيار رقم الطاولة قبل متابعة الطلب.</p>
      <p class="note" id="tableModalNote">رقم الطاولة موجود على الباركود على الطاولة.</p>
      <select id="tablePrompt"></select>
      <div class="actions">
        <button class="btn" id="tableCancelBtn">إلغاء</button>
        <button class="btn primary" id="tableConfirmBtn">تأكيد</button>
      </div>
      <div class="error" id="tablePromptError">يرجى اختيار رقم الطاولة لإتمام الطلب</div>
    </div>
  </div>

  <div class="modal option-modal" id="optionModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="optionModalTitle">اختر النوع</h3>
      <p id="optionModalDesc">يرجى اختيار نوع المشروب لإضافته للسلة.</p>
      <div class="options" id="optionModalOptions"></div>
      <div class="actions">
        <button class="btn" id="optionModalCancel" type="button">إلغاء</button>
      </div>
    </div>
  </div>

  <div class="modal log-modal" id="orderLogModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="orderLogTitle">سجل الطلبات</h3>
      <p id="orderLogDesc">يتم حفظ الطلبات المرسلة من هذا الجهاز هنا للرجوع إليها لاحقًا.</p>
      <div style="display:flex;gap:8px;align-items:center">
        <label for="orderLogCustomerSelect" id="orderLogCustomerLabel" style="font-size:13px;color:var(--muted)">اختر العميل</label>
        <select id="orderLogCustomerSelect" style="flex:1;border:1px solid var(--border);background:var(--card);color:var(--text);padding:8px;border-radius:10px"></select>
      </div>
      <div class="log-empty" id="orderLogEmpty">لا توجد طلبات مسجلة بعد.</div>
      <div class="log-list" id="orderLogList"></div>
      <div class="actions">
        <button class="btn" id="orderLogCloseBtn">إغلاق</button>
        <button class="btn ghost" id="orderLogClearBtn">🧹 <span id="orderLogClearLabel">حذف السجل</span></button>
      </div>
    </div>
  </div>

  <div class="modal profile-modal" id="profileModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="profileModalTitle">بياناتك</h3>
      <p id="profileModalDesc">أدخل اسمك ورقم جوالك لنرحب بك دائماً كما تحب.</p>
      <div>
        <label for="profileName" id="profileNameLabel">الاسم</label>
        <input id="profileName" placeholder="اسمك الجميل" autocomplete="name">
      </div>
      <div>
        <label for="profilePhone" id="profilePhoneLabel">رقم الجوال</label>
        <input id="profilePhone" placeholder="05xxxxxxxx" inputmode="tel" autocomplete="tel">
        <div class="note" id="profileModalNote">تظهر هذه البيانات على الطلبات فقط لخدمتكم بشكل أفضل.</div>
      </div>
      <div class="actions">
        <button class="btn" id="profileSkipBtn">لاحقاً</button>
        <button class="btn primary" id="profileSaveBtn">حفظ</button>
      </div>
    </div>
  </div>

  <div class="modal loyalty-modal" id="loyaltyModal" aria-hidden="true">
    <div class="backdrop"></div>
    <div class="sheet">
      <h3 id="loyaltyTitle">عميلنا المميز</h3>
      <p id="loyaltyMessage">شكراً لاختيارك مشروبنا المفضل.</p>
      <div class="actions" style="justify-content:center">
        <button class="btn primary" id="loyaltyCloseBtn">تمام</button>
      </div>
    </div>
  </div>

  <script src="menu-data.js"></script>
  <script>
    const TELEGRAM_BOT_TOKEN = '8234122453:AAGmkEFETh1yuXzgDHChoTu0YFuD0BeVK8c';
    const TELEGRAM_CHAT_ID = '5070730903';

    let lang = localStorage.getItem('nima.lang') || 'ar';
    const STRINGS = {
      ar: {
        title:'منيو نيمة', tagline:'قائمة جوال • ثنائية اللغة • داكن/فاتح', search:'ابحث باسم الصنف… (مثال: لاتيه، موهيتو)',
        hot_drinks:'المشروبات الساخنة', cold_drinks:'المشروبات الباردة', dessert:'الحَلَى', call_waiter:'طلب النادل',
        table:'طاولة', footer:'© نيمة كافيه — قائمة تفاعلية للجوال',
        select_table:'اختر رقم الطاولة', table_modal_title:'حدد رقم الطاولة',
        table_modal_desc:'يجب اختيار رقم الطاولة قبل متابعة الطلب.',
        table_modal_note:'رقم الطاولة موجود على الباركود على الطاولة.',
        table_modal_error:'يرجى اختيار رقم الطاولة لإتمام الطلب',
        order_time_label:'وقت الطلب', order_id_label:'رقم الطلب', total_due_label:'الإجمالي المستحق',
        confirm:'تأكيد', cancel:'إلغاء', cart_empty:'السلة فارغة', send_order:'إرسال الطلب',
        order_log_button:'سجل الطلبات', order_log_title:'سجل الطلبات',
        order_log_desc:'يتم حفظ الطلبات المرسلة من هذا الجهاز هنا للرجوع إليها لاحقًا.',
        order_log_empty:'لا توجد طلبات مسجلة بعد.',
        order_log_empty_customer:'لا توجد طلبات مسجلة لهذا العميل بعد.',
        order_log_customer_label:'اختر العميل',
        order_log_guest:'طلبات الضيوف',
        clear_log:'حذف السجل', clear_log_confirm:'هل تريد حذف سجل الطلبات لهذا العميل؟',
        order_sent_saved:'تم إرسال الطلب بنجاح ✅ — حُفظ الطلب في السجل.',
        order_send_failed:'تعذّر إرسال الطلب ❌',
        greeting_guest:'مرحبا ضيفنا العزيز', greeting_named:'مرحبا {name}', greeting_toast:'مرحبا {name}! نورت المكان وتحت ظل النيمة 🤎',
        profile_button:'👤 تحديث البيانات',
        profile_modal_title:'بياناتك', profile_modal_desc:'أدخل اسمك ورقم جوالك لنرحب بك دائماً كما تحب.',
        profile_name_label:'الاسم', profile_phone_label:'رقم الجوال',
        profile_name_placeholder:'اسمك الجميل', profile_phone_placeholder:'05xxxxxxxx',
        profile_note:'تظهر هذه البيانات على الطلبات فقط لخدمتكم بشكل أفضل.',
        profile_skip:'لاحقاً', profile_save:'حفظ', profile_saved:'تم حفظ بياناتك بنجاح 🤎', profile_required:'يرجى إدخال الاسم أو رقم الجوال على الأقل.',
        discount_label:'كود الخصم (اختياري)', discount_placeholder:'أدخل كود الخصم', discount_code_label:'كود الخصم',
        customer_name_label:'اسم العميل', customer_phone_label:'رقم التواصل',
        loyalty_title:'عميلنا المميز',
        loyalty_message:'شكراً من القلب يا {name}! بعد أربع مشروبات، المشروب الخامس <strong>{drink}</strong> علينا مجاناً. تفضل للكاشير وسجل بياناتك لتنضم لعائلة نيمة 🤎',
        loyalty_button:'تمام',
        loyalty_reward_label:'هدية الولاء',
        loyalty_discount_label:'خصم الولاء',
        order_log_loyalty_reward:'هدية الولاء',
        option_modal_title:'اختر النوع',
        option_modal_desc:'اختر نوع {item} المفضل لإضافته للسلة.',
        option_modal_desc_generic:'اختر نوع المشروب المفضل لإضافته للسلة.',
        option_modal_cancel:'إلغاء'
      },
      en: {
        title:'Neema Menu', tagline:'Mobile Menu • Bilingual • Dark/Light', search:'Search item… (e.g., Latte, Mojito)',
        hot_drinks:'Hot Drinks', cold_drinks:'Cold Drinks', dessert:'Dessert', call_waiter:'Call Waiter',
        table:'Table', footer:'© Neema Café — Interactive Mobile Menu',
        select_table:'Select a table number', table_modal_title:'Choose your table',
        table_modal_desc:'Please pick a table number before continuing.',
        table_modal_note:'The table number is printed on the barcode at your table.',
        table_modal_error:'Please choose a table number to continue',
        order_time_label:'Order time', order_id_label:'Order ID', total_due_label:'Total due',
        confirm:'Confirm', cancel:'Cancel', cart_empty:'Cart is empty', send_order:'Send Order',
        order_log_button:'Order Log', order_log_title:'Order Log',
        order_log_desc:'Orders sent from this device are saved here so you can review them later.',
        order_log_empty:'No orders have been saved yet.',
        order_log_empty_customer:'No orders saved for this customer yet.',
        order_log_customer_label:'Choose customer',
        order_log_guest:'Guest orders',
        clear_log:'Clear log', clear_log_confirm:'Clear this customer\'s log?',
        order_sent_saved:'Order sent ✅ — Saved to log.',
        order_send_failed:'Failed to send ❌',
        greeting_guest:'Welcome, dear guest', greeting_named:'Hello {name}', greeting_toast:'Welcome back {name}! You light up Neema 🤎',
        profile_button:'👤 Update info',
        profile_modal_title:'Your details', profile_modal_desc:'Share your name and phone so we can greet you properly.',
        profile_name_label:'Name', profile_phone_label:'Phone',
        profile_name_placeholder:'Your name', profile_phone_placeholder:'+9665...',
        profile_note:'We only use this info to serve you better on orders.',
        profile_skip:'Later', profile_save:'Save', profile_saved:'Your details are saved 🤎', profile_required:'Please enter at least a name or phone number.',
        discount_label:'Discount code (optional)', discount_placeholder:'Enter discount code', discount_code_label:'Discount code',
        customer_name_label:'Customer name', customer_phone_label:'Phone',
        loyalty_title:'VIP Guest',
        loyalty_message:'Thank you so much, {name}! After four drinks, this fifth {drink} is on us. Please see the cashier so we can welcome you into the Neema family 🤎',
        loyalty_button:'Got it',
        loyalty_reward_label:'Loyalty treat',
        loyalty_discount_label:'Loyalty discount',
        order_log_loyalty_reward:'Loyalty treat',
        option_modal_title:'Choose a flavor',
        option_modal_desc:'Pick your preferred {item} option to add to the cart.',
        option_modal_desc_generic:'Pick the drink style you want to add to the cart.',
        option_modal_cancel:'Cancel'
      }
    };

    const SHARED = window.NEEMA_SHARED || {};
    const IMG_DEFAULT = SHARED.IMG_DEFAULT || 'https://i.postimg.cc/Y0GT5M1f/image.png';
    const MENU_STORAGE_KEY = 'neema.menuData.custom';

    const EMPTY_MENU_DATA = {
      hot: { coffee: [], tea: [] },
      cold: { coffee: [], mojito: [], other: [] },
      dessert: { cake: [], side: [] }
    };

    function cloneMenu(obj){
      try{
        return JSON.parse(JSON.stringify(obj));
      }catch(err){
        console.warn('[Neema] Unable to clone menu dataset, falling back to reference copy.', err);
        return obj;
      }
    }

    function ensureMenuShape(menu){
      const shape = cloneMenu(EMPTY_MENU_DATA);
      const source = menu && typeof menu === 'object' ? menu : {};
      Object.keys(shape).forEach(cat=>{
        const catSource = source[cat] && typeof source[cat] === 'object' ? source[cat] : {};
        Object.keys(shape[cat]).forEach(group=>{
          const arr = catSource[group];
          shape[cat][group] = Array.isArray(arr) ? arr : [];
        });
      });
      return shape;
    }

    function loadMenuData(){
      let stored = null;
      try{
        stored = JSON.parse(localStorage.getItem(MENU_STORAGE_KEY) || 'null');
      }catch(err){
        console.warn('[Neema] Unable to read stored menu data — ignoring custom dataset.', err);
        stored = null;
      }
      if(stored && typeof stored === 'object'){
        return ensureMenuShape(stored);
      }
      if(SHARED.MENU_DATA){
        return ensureMenuShape(SHARED.MENU_DATA);
      }
      console.warn('[Neema] Shared menu data not found — rendering with empty menu dataset.');
      return ensureMenuShape(EMPTY_MENU_DATA);
    }

    const data = loadMenuData();

    const ITEMS_API = '/api/items';

    async function fetchItems(){
      try{
        const res = await fetch(ITEMS_API);
        if(!res.ok) throw new Error('status');
        const rows = await res.json();
        const toItem = r => ({ ar:r.name_ar, en:r.name_en, price:Number(r.price), cal:Number(r.calories||0), img:r.img_url || IMG_DEFAULT });
        const hotCoffee = rows.filter(r=>/لاتيه|اسبريسو|كابتشينو|موكا|فلات/i.test(r.name_ar)).map(toItem);
        const hotTea    = rows.filter(r=>/شاي|ماتشا/i.test(r.name_ar)).map(toItem);
        const coldCoffee= rows.filter(r=>/ايس|بارد/i.test(r.name_ar)).map(toItem);
        const mojito    = rows.filter(r=>/موهيتو/i.test(r.name_ar)).map(toItem);
        const otherCold = rows.filter(r=>/عصير|مشروب/i.test(r.name_ar) && !/موهيتو/i.test(r.name_ar)).map(toItem);
        const dessertC  = rows.filter(r=>/كيك|كعكة/i.test(r.name_ar)).map(toItem);
        const dessertS  = rows.filter(r=>/حلا|لقيمات|كوكي/i.test(r.name_ar)).map(toItem);

        data.hot.coffee = hotCoffee;
        data.hot.tea = hotTea;
        data.cold.coffee = coldCoffee;
        data.cold.mojito = mojito;
        data.cold.other = otherCold;
        data.dessert.cake = dessertC;
        data.dessert.side = dessertS;
      }catch(err){
        console.warn('items api failed', err);
      }
    }

    const $ = s=>document.querySelector(s);
    let cart = [];

    let pendingOrderSyncPayload = null;

    async function sendOrderToDB(order){
      try{
        const res = await fetch('/api/orders', {
          method:'POST',
          headers:{ 'content-type':'application/json' },
          body: JSON.stringify(order)
        });
        if(!res.ok) throw new Error('status');
        return await res.json();
      }catch(err){
        console.warn('order db sync failed', err);
        return null;
      }
    }

    async function afterTelegramHook(total){
      let payload = null;
      if(pendingOrderSyncPayload && typeof pendingOrderSyncPayload === 'object'){
        pendingOrderSyncPayload.total = typeof total === 'number' ? total : pendingOrderSyncPayload.total;
        payload = pendingOrderSyncPayload;
      } else if(total && typeof total === 'object'){
        payload = total;
      }
      if(!payload) return null;
      const device = Object.assign({}, payload.device || {});
      if(!device.user_agent && typeof navigator !== 'undefined'){ device.user_agent = navigator.userAgent || ''; }
      payload.device = device;
      pendingOrderSyncPayload = null;
      return await sendOrderToDB(payload);
    }

    async function syncCustomerRecord(total){
      const profile = customerProfile || {};
      const phone = (profile.phone || '').trim();
      if(!phone) return;
      let amount = Number(total);
      if(!Number.isFinite(amount) || amount <= 0){
        amount = Number(cartTotal());
      }
      const payload = {
        name: profile.name || '',
        phone,
        last_order_value: Math.max(amount, 0)
      };
      const device = collectDeviceInfo();
      if(device && device.type){
        payload.device_type = device.type;
      }
      try{
        await fetch('/api/record-customer', {
          method:'POST',
          headers:{ 'content-type':'application/json' },
          body: JSON.stringify(payload)
        });
      }catch(err){
        console.warn('record-customer sync failed', err);
      }
    }
    let selectedTable = '';
    const ORDER_LOG_KEY = 'nima.orderLog';
    const CUSTOMER_PROFILE_KEY = 'nima.customerProfile';
    const CUSTOMER_REGISTRY_KEY = 'nima.customerRegistry';
    const LOYALTY_KEY = 'nima.loyaltyTracker';
    const SESSION_GREETING_KEY = 'nima.greetedSession';
    const DRINK_CATEGORIES = ['hot','cold'];
    let customerProfile = loadCustomerProfile();
    let customerRegistry = loadCustomerRegistry();
    let orderLog = loadOrderLog();
    let loyaltyState = loadLoyaltyState();
    let currentDiscountCode = '';
    let currentLogViewId = '';
    let pendingTableAction = null;
    let restoreCartVisibility = false;

    function escapeHtml(str){
      return String(str || '').replace(/[&<>"']/g, c=>({
        '&':'&amp;',
        '<':'&lt;',
        '>':'&gt;',
        '"':'&quot;',
        "'":'&#39;'
      }[c]));
    }

    function detectDeviceType(){
      const ua = navigator.userAgent || '';
      if(/ipad|tablet/i.test(ua)) return 'tablet';
      if(/mobile|android|iphone|ipod/i.test(ua)) return 'mobile';
      return 'desktop';
    }

    function collectDeviceInfo(){
      const info = {
        type: detectDeviceType(),
        language: navigator.language || '',
        platform: navigator.platform || '',
        vendor: navigator.vendor || '',
        timezone: (typeof Intl !== 'undefined' && Intl.DateTimeFormat) ? (Intl.DateTimeFormat().resolvedOptions().timeZone || '') : '',
        screen: (window.screen && window.screen.width && window.screen.height) ? `${window.screen.width}x${window.screen.height}` : '',
        touch: ('ontouchstart' in window) || (navigator.maxTouchPoints > 0)
      };
      return info;
    }

    function isDrinkCartItem(item){
      if(!item || typeof item !== 'object') return false;
      const cat = item.category || item.baseCategory || '';
      if(!cat) return true;
      if(cat === 'dessert') return false;
      return DRINK_CATEGORIES.includes(cat);
    }

    function isVariantItem(item){
      return !!(item && Array.isArray(item.variants) && item.variants.length);
    }

    function getDefaultVariant(item){
      if(!isVariantItem(item)) return null;
      const desiredKey = (item.defaultVariantKey || '').toString().toLowerCase();
      if(desiredKey){
        const match = item.variants.find(variant=>{
          if(!variant) return false;
          const variantKey = (variant.key || '').toString().toLowerCase();
          return variantKey === desiredKey;
        });
        if(match) return match;
      }
      return item.variants.find(Boolean) || null;
    }

    function getItemKey(item){
      if(!item || typeof item !== 'object') return '';
      if(item.key) return String(item.key);
      const ar = (item.ar || '').trim().toLowerCase();
      const en = (item.en || '').trim().toLowerCase();
      return `${ar}::${en}`;
    }

    function getItemPriceLabel(item){
      const currency = lang==='ar'?'ريال':'SAR';
      if(isVariantItem(item)){
        const defaultVariant = getDefaultVariant(item);
        if(defaultVariant){
          const defaultPrice = Number(defaultVariant.price);
          if(Number.isFinite(defaultPrice)) return `${defaultPrice} ${currency}`;
        }
        const prices = item.variants.map(v=> Number(v && v.price)).filter(v=> Number.isFinite(v));
        if(prices.length){
          const min = Math.min(...prices);
          const max = Math.max(...prices);
          if(min === max) return `${min} ${currency}`;
          return lang==='ar' ? `${min} - ${max} ${currency}` : `${currency} ${min}-${max}`;
        }
        return '—';
      }
      const price = Number(item && item.price);
      if(Number.isFinite(price)) return `${price} ${currency}`;
      return '—';
    }

    function formatVariantPrice(variant){
      if(!variant) return '';
      const value = Number(variant.price);
      if(!Number.isFinite(value)) return '';
      return lang==='ar' ? `${value} ريال` : `${value} SAR`;
    }

    function itemMatchesQuery(item, query){
      if(!query) return true;
      const base = `${(item && item.ar) || ''} ${(item && item.en) || ''}`.toLowerCase();
      if(base.includes(query)) return true;
      if(isVariantItem(item)){
        return item.variants.some(variant=>{
          if(!variant) return false;
          const text = `${variant.ar || ''} ${variant.en || ''}`.toLowerCase();
          return text.includes(query);
        });
      }
      return false;
    }

    function loadCustomerProfile(){
      try{
        const raw = JSON.parse(localStorage.getItem(CUSTOMER_PROFILE_KEY) || 'null');
        if(raw && typeof raw === 'object') return raw;
      }catch(e){}
      return {};
    }

    function saveCustomerProfileData(profile){
      if(!profile || typeof profile !== 'object') return;
      customerProfile = profile;
      localStorage.setItem(CUSTOMER_PROFILE_KEY, JSON.stringify(customerProfile));
    }

    function loadCustomerRegistry(){
      try{
        const raw = JSON.parse(localStorage.getItem(CUSTOMER_REGISTRY_KEY) || 'null');
        if(raw && typeof raw === 'object') return raw;
      }catch(e){}
      return {};
    }

    function saveCustomerRegistry(){
      try{ localStorage.setItem(CUSTOMER_REGISTRY_KEY, JSON.stringify(customerRegistry)); }
      catch(e){ console.warn('Unable to persist customer registry', e); }
    }

    function ensureCustomerRegistryEntry(id, profile={}){
      if(!id) return;
      if(!customerRegistry || typeof customerRegistry !== 'object') customerRegistry = {};
      const existing = customerRegistry[id] || {};
      customerRegistry[id] = {
        name: profile.name !== undefined ? profile.name : (existing.name || ''),
        phone: profile.phone !== undefined ? profile.phone : (existing.phone || '')
      };
      saveCustomerRegistry();
    }

    function generateCustomerId(name='', phone=''){
      const phoneClean = (phone || '').replace(/\D+/g,'');
      if(phoneClean) return `cust-${phoneClean}`;
      const base = (name || '').trim().toLowerCase().replace(/[^\w\u0600-\u06FF]+/g,'-').replace(/^-+|-+$/g,'');
      if(base) return `cust-${base}`;
      return (customerProfile && customerProfile.id) ? customerProfile.id : 'guest';
    }

    function getActiveCustomerId(){
      return (customerProfile && customerProfile.id) ? customerProfile.id : 'guest';
    }

    function loadOrderLog(){
      let stored = null;
      try{ stored = JSON.parse(localStorage.getItem(ORDER_LOG_KEY) || 'null'); }
      catch(e){ stored = null; }
      if(Array.isArray(stored)){
        return { customers:{ guest:{ profile:{ name:'', phone:'' }, orders: stored } } };
      }
      if(!stored || typeof stored !== 'object') stored = { customers:{} };
      if(!stored.customers || typeof stored.customers !== 'object') stored.customers = {};
      return stored;
    }

    function ensureCustomerLog(id, profile){
      if(!id) id = 'guest';
      if(!orderLog || typeof orderLog !== 'object') orderLog = { customers:{} };
      if(!orderLog.customers || typeof orderLog.customers !== 'object') orderLog.customers = {};
      if(!orderLog.customers[id]){
        orderLog.customers[id] = { profile:{ name:'', phone:'' }, orders:[] };
      }
      if(profile){
        if(profile.name) orderLog.customers[id].profile.name = profile.name;
        if(profile.phone) orderLog.customers[id].profile.phone = profile.phone;
      }
      return orderLog.customers[id];
    }

    function saveOrderLog(){
      try{ localStorage.setItem(ORDER_LOG_KEY, JSON.stringify(orderLog)); }
      catch(e){ console.warn('Unable to persist order log', e); }
    }

    function normalizeLoyaltyState(raw){
      if(!raw || typeof raw !== 'object') return { customers:{} };
      if(raw.customers && typeof raw.customers === 'object'){
        const normalized = {};
        Object.keys(raw.customers).forEach(id=>{
          const bucket = raw.customers[id] || {};
          normalized[id] = {
            drinkCount: Number(bucket.drinkCount) || 0,
            rewardCount: Number(bucket.rewardCount) || 0,
            updatedAt: Number(bucket.updatedAt) || Date.now()
          };
        });
        return { customers: normalized };
      }
      const entries = Object.values(raw);
      const totalCount = entries.reduce((sum, rec)=> sum + (Number(rec && rec.count) || 0), 0);
      const rewardCount = entries.reduce((sum, rec)=>{
        const count = Number(rec && rec.count) || 0;
        const stored = Number(rec && rec.rewardLevel);
        return sum + (Number.isFinite(stored) ? stored : Math.floor(count / 5));
      }, 0);
      return {
        customers: {
          guest: { drinkCount: totalCount, rewardCount, updatedAt: Date.now() }
        }
      };
    }

    function loadLoyaltyState(){
      try{
        const raw = JSON.parse(localStorage.getItem(LOYALTY_KEY) || 'null');
        return normalizeLoyaltyState(raw);
      }catch(e){}
      return { customers:{} };
    }

    function ensureLoyaltyState(){
      if(!loyaltyState || typeof loyaltyState !== 'object') loyaltyState = { customers:{} };
      if(!loyaltyState.customers || typeof loyaltyState.customers !== 'object') loyaltyState.customers = {};
    }

    function getLoyaltyBucket(customerId){
      ensureLoyaltyState();
      const id = customerId || 'guest';
      if(!loyaltyState.customers[id]){
        loyaltyState.customers[id] = { drinkCount:0, rewardCount:0, updatedAt: Date.now() };
      }
      return loyaltyState.customers[id];
    }

    function saveLoyaltyState(){
      try{ localStorage.setItem(LOYALTY_KEY, JSON.stringify(loyaltyState)); }
      catch(e){ console.warn('Unable to persist loyalty tracker', e); }
    }

    function getCustomerLabel(id){
      if(!id) return STRINGS[lang].order_log_guest;
      if(customerProfile && customerProfile.id === id && customerProfile.name){
        return customerProfile.name;
      }
      const reg = customerRegistry && customerRegistry[id];
      if(reg && reg.name) return reg.name;
      const stored = orderLog && orderLog.customers && orderLog.customers[id];
      if(stored && stored.profile && stored.profile.name) return stored.profile.name;
      if(id === 'guest') return STRINGS[lang].order_log_guest;
      return `${STRINGS[lang].customer_name_label} ${id}`;
    }

    function getOrdersForCustomer(id){
      const bucket = ensureCustomerLog(id);
      return Array.isArray(bucket.orders) ? bucket.orders : [];
    }

    const tableSelect = document.getElementById('table');
    const tableModalEl = document.getElementById('tableModal');
    const tablePromptSelect = document.getElementById('tablePrompt');
    const tablePromptError = document.getElementById('tablePromptError');
    const tableConfirmBtn = document.getElementById('tableConfirmBtn');
    const tableCancelBtn = document.getElementById('tableCancelBtn');
    const tableModalBackdrop = document.querySelector('#tableModal .backdrop');
    const orderLogModalEl = document.getElementById('orderLogModal');
    const orderLogBackdrop = document.querySelector('#orderLogModal .backdrop');
    const orderLogBtn = document.getElementById('orderLogBtn');
    const orderLogCloseBtn = document.getElementById('orderLogCloseBtn');
    const orderLogClearBtn = document.getElementById('orderLogClearBtn');
    const optionModalEl = document.getElementById('optionModal');
    const optionModalBackdrop = document.querySelector('#optionModal .backdrop');
    const optionModalTitle = document.getElementById('optionModalTitle');
    const optionModalDesc = document.getElementById('optionModalDesc');
    const optionModalOptions = document.getElementById('optionModalOptions');
    const optionModalCancel = document.getElementById('optionModalCancel');
    let pendingOptionItem = null;

    function inferCategoryFromSection(sectionId){
      if(!sectionId) return 'unknown';
      if(sectionId.indexOf('dessert')>-1) return 'dessert';
      if(sectionId.indexOf('cold')>-1) return 'cold';
      return 'hot';
    }

    function mount(id, arr){
      const root=document.getElementById(id);
      if(!root) return;
      root.innerHTML='';
      const category = inferCategoryFromSection(id || '');
      arr.forEach(it=>{
        if(it && typeof it === 'object' && !it.__category){
          it.__category = category;
        }
        const name = (lang==='ar'?it.ar:it.en);
        const el=document.createElement('div'); el.className='item';
        el.innerHTML = `
          <div class="thumb"><img src="${it.img}" alt="${name}" /></div>
          <div>
            <div class="line"><span class="name">${name}</span><span class="dots"></span><span class="price">${getItemPriceLabel(it)}</span></div>
            <div class="sub">${isVariantItem(it) ? (lang==='ar'?'سيُطلب منك اختيار النوع بعد الضغط على الإضافة.':'You can pick the style after tapping add.') : (lang==='ar'?'اضغط زر إضافة للسلة':'Use Add to Cart button')}</div>
          </div>`;
        const btn = document.createElement('button');
        btn.className='addBtn';
        btn.textContent = lang==='ar'?'أضف للسلة':'Add to Cart';
        btn.addEventListener('click', ev=>{
          ev.stopPropagation();
          ensureTableSelection(()=> handleItemAdd(it));
        });
        el.lastElementChild.appendChild(btn);
        root.appendChild(el);
      });
    }

    function populateOptionModal(item){
      if(!optionModalEl) return;
      pendingOptionItem = item || null;
      if(!item){
        optionModalEl.style.display='none';
        optionModalEl.setAttribute('aria-hidden','true');
        if(optionModalOptions) optionModalOptions.innerHTML='';
        if(optionModalTitle) optionModalTitle.textContent = STRINGS[lang].option_modal_title || '';
        if(optionModalDesc){
          const template = STRINGS[lang].option_modal_desc_generic || '';
          optionModalDesc.textContent = template;
        }
        if(optionModalCancel) optionModalCancel.textContent = STRINGS[lang].option_modal_cancel;
        return;
      }
      const displayName = lang==='ar' ? (item.ar || item.en || '') : (item.en || item.ar || '');
      if(optionModalTitle) optionModalTitle.textContent = STRINGS[lang].option_modal_title || '';
      if(optionModalDesc){
        const template = STRINGS[lang].option_modal_desc || '';
        optionModalDesc.innerHTML = template.replace('{item}', `<strong>${escapeHtml(displayName)}</strong>`);
      }
      if(optionModalCancel) optionModalCancel.textContent = STRINGS[lang].option_modal_cancel;
      if(optionModalOptions){
        optionModalOptions.innerHTML='';
        const defaultVariant = getDefaultVariant(item);
        const defaultKey = defaultVariant && (defaultVariant.key || '').toString().toLowerCase();
        (item.variants || []).forEach(variant=>{
          if(!variant) return;
          const btn=document.createElement('button');
          btn.type='button';
          btn.className='btn option-choice';
          const optionMain=document.createElement('span');
          optionMain.className='option-main';
          const variantLabel = lang==='ar' ? (variant.ar || variant.en || '') : (variant.en || variant.ar || '');
          const variantKey = (variant.key || '').toString().toLowerCase();
          if(variant.img){
            const thumb=document.createElement('span');
            thumb.className='thumb';
            const image=document.createElement('img');
            image.src = variant.img;
            image.alt = variantLabel;
            thumb.appendChild(image);
            optionMain.appendChild(thumb);
          }
          const label=document.createElement('span');
          label.className='label';
          const defaultTag = defaultKey && variantKey === defaultKey
            ? (lang==='ar' ? ' (افتراضي)' : ' (Default)')
            : '';
          label.textContent = `${variantLabel}${defaultTag}`;
          optionMain.appendChild(label);
          btn.appendChild(optionMain);
          const priceText = formatVariantPrice(variant);
          if(priceText){
            const priceEl=document.createElement('span');
            priceEl.className='price';
            priceEl.textContent = priceText;
            btn.appendChild(priceEl);
          }
          btn.addEventListener('click', ()=>{ closeOptionModal(); addToCart(item, variant); });
          optionModalOptions.appendChild(btn);
        });
      }
      optionModalEl.style.display='flex';
      optionModalEl.setAttribute('aria-hidden','false');
    }

    function openOptionModal(item){
      if(!isVariantItem(item)) return;
      if(!optionModalEl){
        const fallbackVariant = getDefaultVariant(item);
        addToCart(item, fallbackVariant);
        return;
      }
      populateOptionModal(item);
    }

    function closeOptionModal(){
      if(optionModalEl){
        optionModalEl.style.display='none';
        optionModalEl.setAttribute('aria-hidden','true');
      }
      pendingOptionItem = null;
      if(optionModalOptions) optionModalOptions.innerHTML='';
      if(optionModalTitle) optionModalTitle.textContent = STRINGS[lang].option_modal_title || '';
      if(optionModalDesc){
        const template = STRINGS[lang].option_modal_desc_generic || '';
        optionModalDesc.textContent = template;
      }
      if(optionModalCancel) optionModalCancel.textContent = STRINGS[lang].option_modal_cancel;
    }

    function updateOptionModalTexts(){
      if(optionModalCancel) optionModalCancel.textContent = STRINGS[lang].option_modal_cancel;
      if(optionModalEl && optionModalEl.style.display==='flex' && pendingOptionItem){
        populateOptionModal(pendingOptionItem);
      } else {
        if(optionModalTitle) optionModalTitle.textContent = STRINGS[lang].option_modal_title || '';
        if(optionModalDesc){
          const template = STRINGS[lang].option_modal_desc_generic || '';
          optionModalDesc.textContent = template;
        }
      }
    }

    function handleItemAdd(item){
      if(isVariantItem(item)) openOptionModal(item);
      else addToCart(item);
    }

    function addToCart(item, variant=null){
      if(!item) return;
      if(isVariantItem(item) && !variant){
        openOptionModal(item);
        toast(lang==='ar' ? 'اختر النوع قبل الإضافة للسلة.' : 'Please choose a flavor before adding to the cart.');
        return;
      }
      const baseKey = getItemKey(item);
      const variantLabelAr = variant ? (variant.ar || variant.en || '') : '';
      const variantLabelEn = variant ? (variant.en || variant.ar || '') : '';
      const key = variant ? `${baseKey}::${variant.key || variantLabelAr || variantLabelEn}` : baseKey;
      const price = variant && Number.isFinite(Number(variant.price)) ? Number(variant.price) : Number(item.price) || 0;
      const labelAr = variant ? `${item.ar} (${variantLabelAr})` : item.ar;
      const labelEn = variant ? `${item.en} (${variantLabelEn})` : item.en;
      const options = variant ? [{ ar:variantLabelAr, en:variantLabelEn }] : [];
      const existing = cart.find(i=>i.key===key);
      if(existing){
        existing.qty++;
        const cat = item && item.__category ? item.__category : 'unknown';
        if(!existing.category) existing.category = cat;
        if(!existing.baseCategory) existing.baseCategory = cat;
      }
      else cart.push({
        key,
        ar: labelAr,
        en: labelEn,
        baseAr: item.ar,
        baseEn: item.en,
        price,
        qty:1,
        options,
        category: (item && item.__category) ? item.__category : 'unknown',
        baseCategory: (item && item.__category) ? item.__category : 'unknown'
      });
      renderCart();
    }

    function renderCart(){
      const container = document.getElementById('cart-items');
      const cartBox = document.getElementById('cart');
      if(!container || !cartBox) return;
      container.innerHTML='';
      cart.forEach(i=>{
        const name = lang==='ar'?i.ar:i.en;
        const alt = lang==='ar'?i.en:i.ar;
        const row=document.createElement('div');
        const span=document.createElement('span');
        span.textContent = `${name} (${alt}) x${i.qty} = ${formatPrice(i.price*i.qty)}`;
        const btn=document.createElement('button');
        btn.textContent='❌';
        btn.addEventListener('click',()=> removeFromCart(i.key));
        row.appendChild(span);
        row.appendChild(btn);
        container.appendChild(row);
      });
      const subtotal = cart.reduce((sum,i)=>sum + i.price*i.qty,0);
      const loyaltyCalc = calculateLoyaltyRewards(cart);
      const loyaltyDiscount = loyaltyCalc.discount;
      const loyaltyRewards = loyaltyCalc.rewards;
      const loyaltySummary = {
        baseCount: loyaltyCalc.baseDrinkCount,
        projectedCount: loyaltyCalc.projectedDrinkCount,
        drinkUnits: loyaltyCalc.eligibleDrinks,
        freebiesEarned: loyaltyCalc.freebiesEarned,
        discount: loyaltyDiscount
      };
      const total = Math.max(subtotal - loyaltyDiscount, 0);
      const totalEl = document.getElementById('cart-total');
      if(totalEl) totalEl.textContent = formatPrice(total);
      const loyaltyNoteEl = document.getElementById('cart-loyalty-note');
      if(loyaltyNoteEl){
        if(loyaltyDiscount > 0 && loyaltyRewards.length){
          const currency = lang==='ar'?'ريال':'SAR';
          const parts = loyaltyRewards.map(reward=>{
            const drink = lang==='ar' ? (reward.drink_ar || reward.drink_en || '') : (reward.drink_en || reward.drink_ar || '');
            const qty = reward.freebies || 1;
            const discount = Number(reward.discount) || 0;
            return `${drink} ×${qty} (−${discount} ${currency})`;
          });
          loyaltyNoteEl.textContent = `🎁 ${STRINGS[lang].loyalty_reward_label}: ${parts.join(' • ')}`;
          loyaltyNoteEl.style.display = 'block';
        } else {
          loyaltyNoteEl.style.display = 'none';
          loyaltyNoteEl.textContent = '';
        }
      }
      cartBox.style.display = cart.length?'block':'none';
      const discountEl = document.getElementById('discountInput');
      if(discountEl && discountEl !== document.activeElement){
        discountEl.value = currentDiscountCode;
      }
    }

    const discountInputEl = document.getElementById('discountInput');
    if(discountInputEl){
      discountInputEl.addEventListener('input', ()=>{
        currentDiscountCode = discountInputEl.value.trim();
      });
    }

    function resetDiscountCode(){
      currentDiscountCode = '';
      if(discountInputEl) discountInputEl.value = '';
    }

    function calculateLoyaltyRewards(cartItems){
      const bucket = getLoyaltyBucket(getActiveCustomerId());
      const baseCount = Number(bucket && bucket.drinkCount) || 0;
      let runningCount = baseCount;
      let totalDiscount = 0;
      let drinkUnits = 0;
      const rewardsMap = new Map();

      (cartItems || []).forEach(item=>{
        if(!isDrinkCartItem(item)) return;
        const qty = Number(item && item.qty) || 0;
        if(!qty) return;
        const price = Number(item && item.price) || 0;
        const drinkAr = item.baseAr || item.ar || item.name_ar || item.name_en || '';
        const drinkEn = item.baseEn || item.en || item.name_en || item.name_ar || '';
        const rewardKey = `${drinkAr}|${drinkEn}`;
        for(let i=0; i<qty; i++){
          drinkUnits += 1;
          runningCount += 1;
          if(runningCount % 5 === 0){
            totalDiscount += price;
            if(!rewardsMap.has(rewardKey)){
              rewardsMap.set(rewardKey, { drink_ar: drinkAr, drink_en: drinkEn, freebies:0, discount:0 });
            }
            const record = rewardsMap.get(rewardKey);
            record.freebies += 1;
            record.discount += price;
          }
        }
      });

      const rewards = Array.from(rewardsMap.values());
      const roundedDiscount = Number(totalDiscount.toFixed(2));
      const projectedCount = runningCount;
      const freebiesEarned = rewards.reduce((sum, r)=> sum + (Number(r.freebies) || 0), 0);

      return {
        rewards,
        discount: roundedDiscount,
        eligibleDrinks: drinkUnits,
        baseDrinkCount: baseCount,
        projectedDrinkCount: projectedCount,
        rewardTiersBefore: Math.floor(baseCount / 5),
        rewardTiersAfter: Math.floor(projectedCount / 5),
        freebiesEarned
      };
    }

    function handleLoyaltyRewards(entry){
      if(!entry) return;
      const customerId = (entry.customer && entry.customer.id) || getActiveCustomerId();
      const bucket = getLoyaltyBucket(customerId);
      const loyalty = entry.loyalty || {};
      const projected = Number(loyalty.projectedCount);
      const drinksAdded = Number(loyalty.drinkUnits || 0);
      if(Number.isFinite(projected)){
        bucket.drinkCount = projected;
      } else if(Number.isFinite(drinksAdded)){
        bucket.drinkCount = Number(bucket.drinkCount || 0) + drinksAdded;
      }
      bucket.rewardCount = Math.floor((bucket.drinkCount || 0) / 5);
      bucket.updatedAt = Date.now();
      loyaltyState.customers[customerId] = bucket;
      saveLoyaltyState();
      const rewards = Array.isArray(entry.loyaltyRewards) ? entry.loyaltyRewards : [];
      const freebiesEarned = rewards.reduce((sum, reward)=> sum + (Number(reward.freebies) || 0), 0);
      if(freebiesEarned > 0){
        showLoyaltyModal(rewards[0]);
      }
    }

    function recordOrderLog(entry){
      if(!entry || typeof entry !== 'object') return;
      const customerId = getActiveCustomerId();
      const profile = {
        name: customerProfile && customerProfile.name ? customerProfile.name : '',
        phone: customerProfile && customerProfile.phone ? customerProfile.phone : ''
      };
      ensureCustomerRegistryEntry(customerId, profile);
      const bucket = ensureCustomerLog(customerId, profile);
      bucket.orders.unshift(entry);
      if(bucket.orders.length>100) bucket.orders.length = 100;
      saveOrderLog();
      renderOrderLog(customerId);
    }

    function formatPrice(value){
      const amount = Number(value) || 0;
      return `${amount} ${lang==='ar'?'ريال':'SAR'}`;
    }

    function formatLogTime(timestamp){
      if(!timestamp) return '';
      const date = new Date(timestamp);
      const options = { dateStyle:'short', timeStyle:'short' };
      if(typeof Intl !== 'undefined' && Intl.DateTimeFormat){
        try{ return new Intl.DateTimeFormat(lang==='ar'?'ar-SA':'en-GB', options).format(date); }
        catch(e){}
      }
      return date.toLocaleString();
    }

    function renderOrderLog(preferredId){
      const list = document.getElementById('orderLogList');
      const empty = document.getElementById('orderLogEmpty');
      const selectEl = document.getElementById('orderLogCustomerSelect');
      if(!list || !empty) return;
      const activeId = preferredId || currentLogViewId || getActiveCustomerId();
      currentLogViewId = activeId;
      const optionIds = new Set(['guest']);
      if(customerProfile && customerProfile.id){
        optionIds.add(customerProfile.id);
        ensureCustomerRegistryEntry(customerProfile.id, customerProfile);
        ensureCustomerLog(customerProfile.id, customerProfile);
      }
      Object.keys(customerRegistry || {}).forEach(id=> optionIds.add(id));
      if(orderLog && orderLog.customers){
        Object.keys(orderLog.customers).forEach(id=> optionIds.add(id));
      }
      const options = Array.from(optionIds).map(id=>({ id, label: getCustomerLabel(id) }));
      options.sort((a,b)=> a.label.localeCompare(b.label, lang==='ar'?'ar':'en', { sensitivity:'base' }));
      if(selectEl){
        selectEl.innerHTML='';
        options.forEach(opt=>{
          const o=document.createElement('option');
          o.value = opt.id;
          o.textContent = opt.label;
          selectEl.appendChild(o);
        });
        if(options.some(opt=>opt.id===activeId)){
          selectEl.value = activeId;
        } else if(options.length){
          currentLogViewId = options[0].id;
          selectEl.value = currentLogViewId;
        }
      }
      const orders = getOrdersForCustomer(currentLogViewId);
      list.innerHTML='';
      if(!orders.length){
        empty.style.display='block';
        empty.textContent = STRINGS[lang].order_log_empty_customer || STRINGS[lang].order_log_empty;
        return;
      }
      empty.style.display='none';
      orders.forEach(entry=>{
        const orderId = entry && (entry.orderId || entry.id || entry.code) ? (entry.orderId || entry.id || entry.code) : '#';
        const totalValue = Number(entry && entry.total) || 0;
        const metaParts = [];
        if(entry && entry.table){ metaParts.push(`${STRINGS[lang].table} ${entry.table}`); }
        if(entry && entry.timestamp){
          const timeText = formatLogTime(entry.timestamp);
          if(timeText) metaParts.push(timeText);
        }
        if(entry && entry.discountCode){ metaParts.push(`${STRINGS[lang].discount_code_label}: ${entry.discountCode}`); }
        if(entry && Number(entry.loyaltyDiscount) > 0){
          const discountValue = Number(entry.loyaltyDiscount);
          metaParts.push(`${STRINGS[lang].loyalty_discount_label}: -${discountValue} ${lang==='ar'?'ريال':'SAR'}`);
        }
        if(entry && entry.customer && entry.customer.phone){
          metaParts.push(`${STRINGS[lang].customer_phone_label}: ${entry.customer.phone}`);
        }
        const item = document.createElement('div');
        item.className='log-entry';
        item.innerHTML = `
          <h4>
            <span>${orderId}</span>
            <span class="total">${formatPrice(totalValue)}</span>
          </h4>
          <div class="meta">${metaParts.join(' • ')}</div>
        `;
        if(entry && Array.isArray(entry.items) && entry.items.length){
          const ul = document.createElement('ul');
          ul.className='items';
          entry.items.forEach(it=>{
            const name = lang==='ar' ? (it.name_ar || it.name_en || '') : (it.name_en || it.name_ar || '');
            let optionCandidates = [];
            if(lang==='ar'){
              if(Array.isArray(it.options_ar) && it.options_ar.length) optionCandidates = it.options_ar;
              else if(Array.isArray(it.options)) optionCandidates = it.options;
            } else {
              if(Array.isArray(it.options_en) && it.options_en.length) optionCandidates = it.options_en;
              else if(Array.isArray(it.options)) optionCandidates = it.options;
            }
            const normalizedOptions = Array.isArray(optionCandidates)
              ? optionCandidates.map(opt=>{
                  if(typeof opt === 'string') return opt;
                  if(opt && typeof opt === 'object') return lang==='ar' ? (opt.ar || opt.en || '') : (opt.en || opt.ar || '');
                  return '';
                }).filter(Boolean)
              : [];
            const opts = normalizedOptions.length ? ` — ${normalizedOptions.join(lang==='ar'?'، ':' / ')}` : '';
            const qty = it.qty || 1;
            ul.insertAdjacentHTML('beforeend', `<li>${name} ×${qty}${opts}</li>`);
          });
          item.appendChild(ul);
        }
        if(entry && Array.isArray(entry.loyaltyRewards) && entry.loyaltyRewards.length){
          const note=document.createElement('div');
          note.className='loyalty-note';
          const lines = entry.loyaltyRewards.map(reward=>{
            const drink = lang==='ar' ? (reward.drink_ar || reward.drink_en || '') : (reward.drink_en || reward.drink_ar || '');
            const count = reward.freebies || 1;
            return `${STRINGS[lang].order_log_loyalty_reward}: ${drink} ×${count}`;
          });
          note.textContent = lines.join(' • ');
          item.appendChild(note);
        }
        list.appendChild(item);
      });
      if(selectEl && !selectEl.dataset.bound){
        selectEl.dataset.bound = '1';
        selectEl.addEventListener('change', e=>{
          currentLogViewId = e.target.value || 'guest';
          renderOrderLog(currentLogViewId);
        });
      }
    }

    function removeFromCart(key){
      cart=cart.filter(i=>i.key!==key);
      renderCart();
    }

    function populateTableOptions(select, disablePlaceholder=true){
      if(!select) return;
      select.innerHTML='';
      const placeholder=document.createElement('option');
      placeholder.value='';
      placeholder.textContent = STRINGS[lang].select_table;
      if(disablePlaceholder) placeholder.disabled = true;
      if(!selectedTable) placeholder.selected = true;
      select.appendChild(placeholder);
      for(let i=1;i<=15;i++){
        const option=document.createElement('option');
        option.value=String(i);
        option.textContent = `${STRINGS[lang].table} ${i}`;
        select.appendChild(option);
      }
      if(selectedTable) select.value = selectedTable;
    }

    function setTableValue(val){
      selectedTable = val || '';
      if(tableSelect) tableSelect.value = selectedTable;
      if(tablePromptSelect) tablePromptSelect.value = selectedTable;
    }

    function getCurrentTableValue(){
      if(selectedTable) return selectedTable;
      return (tableSelect && tableSelect.value) || '';
    }

    function formatArTime12h(date){
      let hours = date.getHours();
      const minutes = String(date.getMinutes()).padStart(2, '0');
      const period = hours >= 12 ? 'مساءً' : 'صباحًا';
      hours = hours % 12 || 12;
      return `${hours}:${minutes} ${period}`;
    }

    function buildTimestampInfo(){
      const now = new Date();
      let dateStr = `${now.getFullYear()}/${String(now.getMonth()+1).padStart(2,'0')}/${String(now.getDate()).padStart(2,'0')}`;
      let timeStr = formatArTime12h(now);
      if(typeof Intl !== 'undefined' && Intl.DateTimeFormat){
        try{
          const dateFormatter = new Intl.DateTimeFormat('ar-SA-u-ca-gregory', { year:'numeric', month:'2-digit', day:'2-digit' });
          dateStr = dateFormatter.format(now);
        }catch(e){}
        try{
          const timeFormatter = new Intl.DateTimeFormat('ar-SA-u-ca-gregory', { hour:'numeric', minute:'2-digit', hour12:true });
          let formatted = timeFormatter.format(now);
          if(formatted.includes('ص')) formatted = formatted.replace('ص', 'صباحًا');
          if(formatted.includes('م')) formatted = formatted.replace('م', 'مساءً');
          timeStr = formatted;
        }catch(e){}
      }
      return { now, date: dateStr, time: timeStr, full: `${dateStr} ${timeStr}` };
    }

    function fillTables(){
      populateTableOptions(tableSelect, true);
      if(tableSelect){
        tableSelect.onchange = ()=>{
          const val = tableSelect.value;
          if(val){ setTableValue(val); }
        };
      }
    }

    function updateTableModalTexts(){
      const title=document.getElementById('tableModalTitle');
      const desc=document.getElementById('tableModalDesc');
      const note=document.getElementById('tableModalNote');
      if(title) title.textContent = STRINGS[lang].table_modal_title;
      if(desc) desc.textContent = STRINGS[lang].table_modal_desc;
      if(note) note.textContent = STRINGS[lang].table_modal_note;
      if(tableConfirmBtn) tableConfirmBtn.textContent = STRINGS[lang].confirm;
      if(tableCancelBtn) tableCancelBtn.textContent = STRINGS[lang].cancel;
      if(tablePromptError) tablePromptError.textContent = STRINGS[lang].table_modal_error;
      populateTableOptions(tablePromptSelect, false);
    }

    function isCartVisible(){
      const cartBox = document.getElementById('cart');
      return cartBox && cartBox.style.display === 'block';
    }

    function openTableModal(){
      populateTableOptions(tablePromptSelect, false);
      if(tablePromptError) tablePromptError.style.display='none';
      if(tableModalEl){
        tableModalEl.style.display='flex';
        tableModalEl.setAttribute('aria-hidden','false');
        setTimeout(()=>{ if(tablePromptSelect) tablePromptSelect.focus(); },30);
      }
    }

    function closeTableModal(){
      if(tableModalEl){
        tableModalEl.style.display='none';
        tableModalEl.setAttribute('aria-hidden','true');
      }
      if(tablePromptError) tablePromptError.style.display='none';
      pendingTableAction = null;
      restoreCartVisibility = false;
    }

    function ensureTableSelection(action, options={}){
      const forcePrompt = !!options.forcePrompt;
      const restorePref = typeof options.restoreCart === 'boolean' ? options.restoreCart : isCartVisible();
      const current = getCurrentTableValue();
      if(current && !forcePrompt){
        setTableValue(current);
        if(typeof action === 'function') action(current);
        return true;
      }
      pendingTableAction = typeof action === 'function' ? action : null;
      restoreCartVisibility = restorePref;
      openTableModal();
      return false;
    }

    if(tableModalBackdrop) tableModalBackdrop.addEventListener('click', closeTableModal);
    if(optionModalBackdrop) optionModalBackdrop.addEventListener('click', closeOptionModal);
    if(optionModalCancel) optionModalCancel.addEventListener('click', e=>{ e.preventDefault(); closeOptionModal(); });
    if(tableCancelBtn) tableCancelBtn.addEventListener('click', e=>{ e.preventDefault(); closeTableModal(); });
    if(tablePromptSelect) tablePromptSelect.addEventListener('change', ()=>{ if(tablePromptError) tablePromptError.style.display='none'; });
    if(tableConfirmBtn) tableConfirmBtn.addEventListener('click', e=>{
      e.preventDefault();
      const val = tablePromptSelect ? tablePromptSelect.value : '';
      if(!val){
        if(tablePromptError) tablePromptError.style.display='block';
        if(tablePromptSelect) tablePromptSelect.focus();
        return;
      }
      if(tablePromptError) tablePromptError.style.display='none';
      setTableValue(val);
      if(tableModalEl){
        tableModalEl.style.display='none';
        tableModalEl.setAttribute('aria-hidden','true');
      }
      const action = pendingTableAction;
      const shouldRestore = restoreCartVisibility;
      pendingTableAction = null;
      restoreCartVisibility = false;
      if(shouldRestore){
        const cartBox = document.getElementById('cart');
        if(cartBox && cart.length){ cartBox.style.display='block'; }
      }
      if(action) action(val);
    });

    function openOrderLog(){
      renderOrderLog();
      if(orderLogModalEl){
        orderLogModalEl.style.display='flex';
        orderLogModalEl.setAttribute('aria-hidden','false');
      }
    }

    function closeOrderLog(){
      if(orderLogModalEl){
        orderLogModalEl.style.display='none';
        orderLogModalEl.setAttribute('aria-hidden','true');
      }
    }

    if(orderLogBackdrop) orderLogBackdrop.addEventListener('click', closeOrderLog);
    if(orderLogBtn) orderLogBtn.addEventListener('click', openOrderLog);
    if(orderLogCloseBtn) orderLogCloseBtn.addEventListener('click', e=>{ e.preventDefault(); closeOrderLog(); });
    if(orderLogClearBtn){
      orderLogClearBtn.addEventListener('click', e=>{
        e.preventDefault();
        const targetId = currentLogViewId || getActiveCustomerId();
        const bucket = ensureCustomerLog(targetId);
        if(!bucket.orders.length){ closeOrderLog(); return; }
        if(!window.confirm(STRINGS[lang].clear_log_confirm)) return;
        bucket.orders = [];
        saveOrderLog();
        renderOrderLog(targetId);
      });
    }

    const profileModalEl = document.getElementById('profileModal');
    const profileBackdrop = document.querySelector('#profileModal .backdrop');
    const profileBtnTrigger = document.getElementById('profileBtn');
    const profileNameInput = document.getElementById('profileName');
    const profilePhoneInput = document.getElementById('profilePhone');
    const profileSaveBtn = document.getElementById('profileSaveBtn');
    const profileSkipBtn = document.getElementById('profileSkipBtn');
    let profileForced = false;

    function normalizePhone(value){
      return (value || '').replace(/\s+/g,'').replace(/[^0-9+]/g,'');
    }

    function openProfileModal(force=false){
      profileForced = !!force;
      if(profileModalEl){
        profileModalEl.style.display='flex';
        profileModalEl.setAttribute('aria-hidden','false');
      }
      if(profileSkipBtn) profileSkipBtn.style.display = profileForced ? 'none' : 'inline-flex';
      if(profileNameInput){
        profileNameInput.value = customerProfile.name || '';
        if(profilePhoneInput) profilePhoneInput.value = customerProfile.phone || '';
        setTimeout(()=> profileNameInput.focus(), 40);
      }
    }

    function closeProfileModal(){
      if(profileModalEl){
        profileModalEl.style.display='none';
        profileModalEl.setAttribute('aria-hidden','true');
      }
      profileForced = false;
    }

    function updateGreeting(){
      const textEl = document.getElementById('greetingText');
      const btn = document.getElementById('profileBtn');
      if(btn) btn.textContent = STRINGS[lang].profile_button;
      if(!textEl) return;
      const name = customerProfile && customerProfile.name ? customerProfile.name.trim() : '';
      if(name){
        const safe = escapeHtml(name);
        const template = STRINGS[lang].greeting_named || STRINGS[lang].greeting_guest;
        textEl.innerHTML = template.replace('{name}', `<span class="welcome-name">${safe}</span>`);
      } else {
        textEl.textContent = STRINGS[lang].greeting_guest;
      }
    }

    function maybeToastGreeting(force=false){
      if(!(customerProfile && customerProfile.name)) return;
      const id = customerProfile.id || 'guest';
      const sessionKey = `${SESSION_GREETING_KEY}:${id}`;
      if(!force && sessionStorage.getItem(sessionKey)) return;
      const template = STRINGS[lang].greeting_toast || STRINGS[lang].greeting_named || STRINGS[lang].greeting_guest;
      toast(template.replace('{name}', customerProfile.name));
      sessionStorage.setItem(sessionKey, '1');
    }

    function handleProfileSave(){
      const name = (profileNameInput && profileNameInput.value || '').trim();
      const phone = normalizePhone((profilePhoneInput && profilePhoneInput.value || '').trim());
      if(!name && !phone){
        toast(STRINGS[lang].profile_required);
        if(profileNameInput) profileNameInput.focus();
        return;
      }
      let id = generateCustomerId(name, phone);
      if(!id) id = 'guest';
      const updatedProfile = { id, name, phone };
      saveCustomerProfileData(updatedProfile);
      ensureCustomerRegistryEntry(id, updatedProfile);
      const bucket = ensureCustomerLog(id, updatedProfile);
      if(id !== 'guest' && orderLog && orderLog.customers && orderLog.customers.guest && orderLog.customers.guest.orders.length){
        const guestOrders = orderLog.customers.guest.orders.slice();
        if(guestOrders.length){
          bucket.orders = guestOrders.concat(bucket.orders || []);
          orderLog.customers.guest.orders = [];
        }
      }
      saveOrderLog();
      currentLogViewId = id;
      updateGreeting();
      maybeToastGreeting(true);
      toast(STRINGS[lang].profile_saved);
      closeProfileModal();
      renderOrderLog(id);
    }

    if(profileBtnTrigger) profileBtnTrigger.addEventListener('click', ()=> openProfileModal(false));
    if(profileBackdrop) profileBackdrop.addEventListener('click', ()=>{ if(!profileForced) closeProfileModal(); });
    if(profileSkipBtn) profileSkipBtn.addEventListener('click', e=>{ e.preventDefault(); closeProfileModal(); });
    if(profileSaveBtn) profileSaveBtn.addEventListener('click', e=>{ e.preventDefault(); handleProfileSave(); });

    const loyaltyModalEl = document.getElementById('loyaltyModal');
    const loyaltyBackdrop = document.querySelector('#loyaltyModal .backdrop');
    const loyaltyMessageEl = document.getElementById('loyaltyMessage');
    const loyaltyCloseBtn = document.getElementById('loyaltyCloseBtn');

    function showLoyaltyModal(info){
      if(!loyaltyModalEl) return;
      const drinkName = lang==='ar' ? (info && (info.drink_ar || info.drink_en) || '') : (info && (info.drink_en || info.drink_ar) || '');
      const customerName = customerProfile && customerProfile.name ? customerProfile.name : (lang==='ar'?'ضيفنا العزيز':'dear guest');
      if(loyaltyMessageEl){
        const safeDrink = escapeHtml(drinkName);
        const safeName = escapeHtml(customerName);
        const template = STRINGS[lang].loyalty_message || '';
        loyaltyMessageEl.innerHTML = template.replace('{drink}', safeDrink).replace('{name}', `<span class="welcome-name">${safeName}</span>`);
      }
      loyaltyModalEl.style.display='flex';
      loyaltyModalEl.setAttribute('aria-hidden','false');
    }

    function closeLoyaltyModal(){
      if(!loyaltyModalEl) return;
      loyaltyModalEl.style.display='none';
      loyaltyModalEl.setAttribute('aria-hidden','true');
    }

    if(loyaltyBackdrop) loyaltyBackdrop.addEventListener('click', closeLoyaltyModal);
    if(loyaltyCloseBtn) loyaltyCloseBtn.addEventListener('click', e=>{ e.preventDefault(); closeLoyaltyModal(); });

    function renderAll(){
      const titleEl = document.getElementById('title');
      const tagEl = document.getElementById('tagline');
      const searchEl = document.getElementById('search');
      const footEl = document.getElementById('foot');
      if(titleEl) titleEl.textContent = STRINGS[lang].title;
      if(tagEl) tagEl.textContent = STRINGS[lang].tagline;
      if(searchEl) searchEl.placeholder = STRINGS[lang].search;
      document.querySelectorAll('[data-i18n="hot_drinks"]').forEach(e=>e.textContent=STRINGS[lang].hot_drinks);
      document.querySelectorAll('[data-i18n="cold_drinks"]').forEach(e=>e.textContent=STRINGS[lang].cold_drinks);
      document.querySelectorAll('[data-i18n="dessert"]').forEach(e=>e.textContent=STRINGS[lang].dessert);
      document.querySelectorAll('[data-i18n="call_waiter"]').forEach(e=>e.textContent=STRINGS[lang].call_waiter);
      document.querySelectorAll('[data-i18n="send_order"]').forEach(e=>e.textContent=STRINGS[lang].send_order);
      if(footEl) footEl.textContent = STRINGS[lang].footer;
      const logBtnLabel = document.getElementById('orderLogBtnLabel');
      if(logBtnLabel) logBtnLabel.textContent = STRINGS[lang].order_log_button;
      const logTitle = document.getElementById('orderLogTitle');
      const logDesc = document.getElementById('orderLogDesc');
      const logEmpty = document.getElementById('orderLogEmpty');
      const logClose = document.getElementById('orderLogCloseBtn');
      const logClear = document.getElementById('orderLogClearLabel');
      if(logTitle) logTitle.textContent = STRINGS[lang].order_log_title;
      if(logDesc) logDesc.textContent = STRINGS[lang].order_log_desc;
      if(logEmpty) logEmpty.textContent = STRINGS[lang].order_log_empty_customer || STRINGS[lang].order_log_empty;
      if(logClose) logClose.textContent = STRINGS[lang].cancel;
      if(logClear) logClear.textContent = STRINGS[lang].clear_log;
      const orderLogCustomerLabel = document.getElementById('orderLogCustomerLabel');
      if(orderLogCustomerLabel) orderLogCustomerLabel.textContent = STRINGS[lang].order_log_customer_label;
      const profileBtnEl = document.getElementById('profileBtn');
      if(profileBtnEl) profileBtnEl.textContent = STRINGS[lang].profile_button;
      const discountLabel = document.getElementById('discountLabel');
      if(discountLabel) discountLabel.textContent = STRINGS[lang].discount_label;
      const discountInput = document.getElementById('discountInput');
      if(discountInput){
        discountInput.placeholder = STRINGS[lang].discount_placeholder;
        if(discountInput !== document.activeElement) discountInput.value = currentDiscountCode;
      }
      const profileTitle = document.getElementById('profileModalTitle');
      if(profileTitle) profileTitle.textContent = STRINGS[lang].profile_modal_title;
      const profileDesc = document.getElementById('profileModalDesc');
      if(profileDesc) profileDesc.textContent = STRINGS[lang].profile_modal_desc;
      const profileNameLabel = document.getElementById('profileNameLabel');
      if(profileNameLabel) profileNameLabel.textContent = STRINGS[lang].profile_name_label;
      const profilePhoneLabel = document.getElementById('profilePhoneLabel');
      if(profilePhoneLabel) profilePhoneLabel.textContent = STRINGS[lang].profile_phone_label;
      if(profileNameInput) profileNameInput.placeholder = STRINGS[lang].profile_name_placeholder;
      if(profilePhoneInput) profilePhoneInput.placeholder = STRINGS[lang].profile_phone_placeholder;
      const profileNote = document.getElementById('profileModalNote');
      if(profileNote) profileNote.textContent = STRINGS[lang].profile_note;
      if(profileSkipBtn) profileSkipBtn.textContent = STRINGS[lang].profile_skip;
      if(profileSaveBtn) profileSaveBtn.textContent = STRINGS[lang].profile_save;
      const loyaltyTitle = document.getElementById('loyaltyTitle');
      if(loyaltyTitle) loyaltyTitle.textContent = STRINGS[lang].loyalty_title;
      if(loyaltyCloseBtn) loyaltyCloseBtn.textContent = STRINGS[lang].loyalty_button;
      document.documentElement.lang = lang==='ar'?'ar':'en';
      document.documentElement.dir = lang==='ar'?'rtl':'ltr';
      mount('hot-coffee', data.hot.coffee);
      mount('hot-tea', data.hot.tea);
      mount('cold-coffee', data.cold.coffee);
      mount('cold-mojito', data.cold.mojito);
      mount('cold-other', data.cold.other);
      mount('dessert-cake', data.dessert.cake);
      mount('dessert-side', data.dessert.side);
      const cartTitle = document.querySelector('#cart h3');
      if(cartTitle) cartTitle.textContent = lang==='ar'?'سلة الطلبات':'Cart';
      const sendOrderBtn = document.getElementById('sendOrder');
      if(sendOrderBtn) sendOrderBtn.textContent = STRINGS[lang].send_order;
      fillTables();
      updateTableModalTexts();
      updateOptionModalTexts();
      renderCart();
      updateGreeting();
      renderOrderLog(currentLogViewId || getActiveCustomerId());
    }

    function performSendOrder(tableOverride){
      const stamp = buildTimestampInfo();
      const table = tableOverride || getCurrentTableValue() || (lang==='ar'?'؟':'?');
      const itemLines = cart.map(i=>{
        const name = i.ar || i.en || '';
        return `• ${name} ×${i.qty} — ${i.price * i.qty} ريال`;
      });
        const subtotal = cart.reduce((sum,i)=>sum + i.price*i.qty,0);
        const loyaltyCalc = calculateLoyaltyRewards(cart);
        const loyaltyDiscount = loyaltyCalc.discount;
        const loyaltyRewards = loyaltyCalc.rewards;
        const loyaltySummary = {
          baseCount: loyaltyCalc.baseDrinkCount,
          projectedCount: loyaltyCalc.projectedDrinkCount,
          drinkUnits: loyaltyCalc.eligibleDrinks,
          freebiesEarned: loyaltyCalc.freebiesEarned,
          discount: loyaltyDiscount
        };
        const total = Math.max(subtotal - loyaltyDiscount, 0);
      const headerLine = `🧾 طلب جديد — طاولة ${table}`;
      const orderId = `N${stamp.now.getTime().toString(36).toUpperCase()}`;
      const orderIdLine = `🆔 ${STRINGS.ar.order_id_label}: ${orderId}`;
      const timeLine = `⏰ ${STRINGS.ar.order_time_label}: ${stamp.date} — ${stamp.time}`;
      const discountCode = currentDiscountCode.trim();
      const messageLines = [
        headerLine,
        orderIdLine,
        timeLine,
        '📋 تفاصيل الطلب:',
        ...itemLines
      ];
      if(loyaltyRewards.length){
        loyaltyRewards.forEach(reward=>{
          const drinkAr = reward.drink_ar || reward.drink_en || '';
          messageLines.push(`🎁 ${STRINGS.ar.loyalty_reward_label}: ${drinkAr} مجاني`);
        });
      }
      if(loyaltyDiscount > 0){
        messageLines.push(`💝 ${STRINGS.ar.loyalty_discount_label}: -${loyaltyDiscount} ريال`);
      }
      if(discountCode){
        messageLines.push(`🎟️ ${STRINGS.ar.discount_code_label}: ${discountCode}`);
      }
      const customerNameValue = customerProfile && customerProfile.name ? customerProfile.name : '';
      const customerPhoneValue = customerProfile && customerProfile.phone ? customerProfile.phone : '';
      if(customerNameValue){
        messageLines.push(`👤 ${STRINGS.ar.customer_name_label}: ${customerNameValue}`);
      }
      if(customerPhoneValue){
        messageLines.push(`📞 ${STRINGS.ar.customer_phone_label}: ${customerPhoneValue}`);
      }
      messageLines.push(`💵 ${STRINGS.ar.total_due_label || 'الإجمالي المستحق'}: ${total} ريال`);
      const text = messageLines.map(encodeURIComponent).join('%0A%0A');

      const orderEntry = {
        id: orderId,
        orderId,
        table,
        subtotal,
        loyaltyDiscount,
        total,
        timestamp: stamp.now.getTime(),
        discountCode,
        customer: {
          id: getActiveCustomerId(),
          name: customerNameValue || '',
          phone: customerPhoneValue || ''
        },
        loyaltyRewards,
        loyalty: loyaltySummary,
        drink_units: loyaltyCalc.eligibleDrinks,
        items: cart.map(i=>({
          name_ar: i.baseAr || i.ar,
          name_en: i.baseEn || i.en,
          qty: i.qty,
          price: i.price,
          options: (i.options || []).map(opt=> opt && opt.ar ? opt.ar : (opt && opt.en) || '').filter(Boolean),
          options_ar: (i.options || []).map(opt=> opt && opt.ar ? opt.ar : '').filter(Boolean),
          options_en: (i.options || []).map(opt=> opt && opt.en ? opt.en : '').filter(Boolean),
          category: i.category || i.baseCategory || ''
        }))
      };

      pendingOrderSyncPayload = {
        table_no: table,
        subtotal,
        total,
        discount_code: discountCode,
        loyalty_discount: loyaltyDiscount,
        loyalty_rewards: loyaltyRewards,
        loyalty: loyaltySummary,
        drink_units: loyaltyCalc.eligibleDrinks,
        cart: orderEntry.items,
        customer: orderEntry.customer,
        device: collectDeviceInfo(),
        skip_customer_upsert: true
        device: collectDeviceInfo()
      };

      const statusBase = new URL('order-status.html', window.location.href);
      statusBase.search = '';
      statusBase.searchParams.set('order', orderId);
      statusBase.searchParams.set('table', table);
      statusBase.searchParams.set('issued', String(stamp.now.getTime()));
      statusBase.searchParams.set('chat', TELEGRAM_CHAT_ID);
      const acceptUrl = new URL(statusBase.toString());
      acceptUrl.searchParams.set('action', 'accept');

      const replyMarkup = encodeURIComponent(JSON.stringify({
        inline_keyboard:[
          [{ text:'✅ قبول الطلب', url: acceptUrl.toString() }]
        ]
      }));

      const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${text}&reply_markup=${replyMarkup}`;
      fetch(url)
        .then(async (res) => {
          if (!res.ok) throw new Error('telegram'); // only network/Telegram decides failure

          // Telegram delivered — everything below is best-effort
          try { await recordOrderLog(orderEntry); } catch (e) { console.warn('recordOrderLog failed', e); }
          try { handleLoyaltyRewards(orderEntry); } catch (e) { console.warn('loyalty update failed', e); }

          toast(STRINGS[lang].order_sent_saved);

          try { await afterTelegramHook(total); } catch (e) { console.warn('afterTelegramHook failed', e); }
          try { await syncCustomerRecord(total); } catch (e) { console.warn('record-customer hook failed', e); }

          // Always clear cart on delivery success
          cart=[];
          renderCart();
          resetDiscountCode();
        })
        .catch(() => {
          // Only shows when Telegram itself failed
          toast(STRINGS[lang].order_send_failed);
        });
    }

    const sendOrderBtn = document.getElementById('sendOrder');
    if(sendOrderBtn){
      sendOrderBtn.addEventListener('click', ()=>{
        if(!cart.length){ toast(STRINGS[lang].cart_empty); return; }
        ensureTableSelection(tableValue=> performSendOrder(tableValue), { restoreCart: isCartVisible() });
      });
    }

    const sendBarBtn = document.getElementById('sendBarBtn');
    if(sendBarBtn){
      sendBarBtn.addEventListener('click', ()=>{
        if(!cart.length){ toast(STRINGS[lang].cart_empty); return; }
        ensureTableSelection(tableValue=> performSendOrder(tableValue), { restoreCart: isCartVisible() });
      });
    }

    const callBtn = document.getElementById('callBtn');
    if(callBtn){
      function sendWaiterCall(tableId){
        const fallback = lang==='ar'?'؟':'?';
        const t = tableId || fallback;
        const stamp = buildTimestampInfo();
        const lines = [`🔔 طاولة ${t} تحتاج خدمة`, `⏰ ${STRINGS.ar.order_time_label}: ${stamp.full}`];
        const textParam = lines.map(encodeURIComponent).join('%0A%0A');
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${textParam}`;
        fetch(url).catch(()=>{});
        toast(lang==='ar'?'تم تنبيه النادل وسيصل إليك قريباً.':'The waiter has been notified and will arrive shortly.');
      }

      callBtn.addEventListener('click', ()=>{
        ensureTableSelection(tableValue=> sendWaiterCall(tableValue), { forcePrompt:true, restoreCart:false });
      });
    }

    const search = document.getElementById('search');
    if(search){
      search.addEventListener('input', ()=>{
        const q = search.value.trim().toLowerCase();
        const f = arr => arr.filter(x=> itemMatchesQuery(x, q));
        if(q){
          mount('hot-coffee', f(data.hot.coffee));
          mount('hot-tea', f(data.hot.tea));
          mount('cold-coffee', f(data.cold.coffee));
          mount('cold-mojito', f(data.cold.mojito));
          mount('cold-other', f(data.cold.other));
          mount('dessert-cake', f(data.dessert.cake));
          mount('dessert-side', f(data.dessert.side));
        } else {
          renderAll();
        }
      });
    }

    const modeBtn = document.getElementById('modeBtn');
    if(modeBtn){
      const initialMode = localStorage.getItem('nima.mode')||'light';
      if(initialMode==='dark') document.body.classList.add('dark');
      modeBtn.textContent = document.body.classList.contains('dark') ? '☀️' : '🌙';
      modeBtn.onclick = ()=>{
        document.body.classList.toggle('dark');
        localStorage.setItem('nima.mode', document.body.classList.contains('dark')?'dark':'light');
        modeBtn.textContent = document.body.classList.contains('dark') ? '☀️' : '🌙';
      };
    }

    const langBtn = document.getElementById('langBtn');
    function applyLangButtonLabel(){
      if(!langBtn) return;
      const labelFn = (SHARED && typeof SHARED.getLangToggleLabel === 'function')
        ? SHARED.getLangToggleLabel
        : (currentLang => currentLang === 'ar' ? 'E' : 'ع');
      langBtn.textContent = labelFn(lang);
    }
    if(langBtn){
      langBtn.onclick = ()=>{
        lang = (lang==='ar') ? 'en' : 'ar';
        localStorage.setItem('nima.lang', lang);
        renderAll();
        applyLangButtonLabel();
      };
    }

    function toast(msg){
      const t = document.createElement('div');
      t.textContent = msg;
      t.style.position='fixed'; t.style.bottom='80px'; t.style.left='50%'; t.style.transform='translateX(-50%)';
      t.style.padding='12px 20px'; t.style.borderRadius='12px'; t.style.boxShadow='0 4px 12px rgba(0,0,0,0.2)';
      t.style.zIndex='400'; t.style.opacity='0'; t.style.transition='opacity .3s ease';
      t.style.background = document.body.classList.contains('dark') ? 'var(--brand-dark)' : 'var(--brand)';
      t.style.color = '#fff';
      document.body.appendChild(t);
      setTimeout(()=> t.style.opacity='1', 20);
      setTimeout(()=> { t.style.opacity='0'; setTimeout(()=> t.remove(), 300); }, 2500);
    }

    async function init(){
      localStorage.removeItem('nima.table');
      if(customerProfile && (customerProfile.name || customerProfile.phone)){
        if(!customerProfile.id){
          customerProfile.id = generateCustomerId(customerProfile.name || '', customerProfile.phone || '');
          saveCustomerProfileData(customerProfile);
        }
        ensureCustomerRegistryEntry(customerProfile.id, customerProfile);
        ensureCustomerLog(customerProfile.id, customerProfile);
      }
      await fetchItems();
      renderAll();
      applyLangButtonLabel();
      if(customerProfile && (customerProfile.name || customerProfile.phone)){
        maybeToastGreeting();
      } else {
        setTimeout(()=> openProfileModal(false), 900);
      }
    }

    init();
  </script>
</body>
</html>
